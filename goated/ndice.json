{"v":"5.12.1","fr":30,"ip":0,"op":727,"w":1000,"h":1000,"nm":"Scene 2","ddd":0,"assets":[{"id":"comp_0","nm":"D_2","fr":30,"layers":[{"ddd":0,"ind":1,"ty":0,"nm":"D_1","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[540,540,0],"ix":2,"l":2},"a":{"a":0,"k":[500,500,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1000,"h":1000,"ip":0,"op":750,"st":0,"bm":0}]},{"id":"comp_1","nm":"D_1","fr":30,"layers":[{"ddd":0,"ind":1,"ty":0,"nm":"MAP || Dice || square_1 || SIDE  [3]","refId":"comp_2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\nvar findIndex;\n'use native operators';\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst ex_layer = thisComp.layer('square_2');\nconst transparency_value = ex_layer.effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nlet extr_data_arr;\nlet srt_ind = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\n$bm_rt = value = is_side_visible ? opacity_value : transparency_value;"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[0,0],"ix":1}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n}\n$bm_rt = C;"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet AB = sub(B, A);\nlet scaleX = $bm_div($bm_mul(100, len_vec(AB)), thisLayer.height);\n$bm_rt = scaleX;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfunction findIndex(arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n;\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet D = vertices[3];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nD = transform2D_apply(layer_transform_matrix, D);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    D = transform2D_apply(parent_transform_matrix, D);\n}\nlet AD = sub(D, A);\nlet w = thisLayer.width;\nlet skw = effect('Transform')('ADBE Geometry2-0005').value;\nlet cos_sk = Math.cos($bm_div($bm_mul(skw, Math.PI), 180));\nlet scaleY = $bm_div($bm_mul(100, len_vec(AD)), $bm_div(w, cos_sk));\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    scaleY = $bm_neg(scaleY);\n}\n$bm_rt = scaleY;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\nvar angle_between_cw_te, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, findIndex;\n'use native operators';\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet CB = sub(B, C);\nconst rot = effect('Transform')('ADBE Geometry2-0007').value;\nconst rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\nconst x_rot = [\n    Math.cos(rot_rad),\n    Math.sin(rot_rad)\n];\nlet skw = angle_between_cw_te(CB, x_rot);\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n    skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n}\n;\n$bm_rt = skw;"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, angle_between_cw_te;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    3,\n    0\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet BA = sub(A, B);\n$bm_rt = angle_between_cw_te(BA, [\n    0,\n    1\n]);"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":0,"nm":"MAP || Dice || square_1 || SIDE  [2]","refId":"comp_3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\nvar findIndex;\n'use native operators';\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst ex_layer = thisComp.layer('square_2');\nconst transparency_value = ex_layer.effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nlet extr_data_arr;\nlet srt_ind = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\n$bm_rt = value = is_side_visible ? opacity_value : transparency_value;"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[0,0],"ix":1}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n}\n$bm_rt = C;"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet AB = sub(B, A);\nlet scaleX = $bm_div($bm_mul(100, len_vec(AB)), thisLayer.height);\n$bm_rt = scaleX;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfunction findIndex(arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n;\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet D = vertices[3];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nD = transform2D_apply(layer_transform_matrix, D);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    D = transform2D_apply(parent_transform_matrix, D);\n}\nlet AD = sub(D, A);\nlet w = thisLayer.width;\nlet skw = effect('Transform')('ADBE Geometry2-0005').value;\nlet cos_sk = Math.cos($bm_div($bm_mul(skw, Math.PI), 180));\nlet scaleY = $bm_div($bm_mul(100, len_vec(AD)), $bm_div(w, cos_sk));\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    scaleY = $bm_neg(scaleY);\n}\n$bm_rt = scaleY;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\nvar angle_between_cw_te, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, findIndex;\n'use native operators';\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet CB = sub(B, C);\nconst rot = effect('Transform')('ADBE Geometry2-0007').value;\nconst rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\nconst x_rot = [\n    Math.cos(rot_rad),\n    Math.sin(rot_rad)\n];\nlet skw = angle_between_cw_te(CB, x_rot);\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n    skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n}\n;\n$bm_rt = skw;"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, angle_between_cw_te;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    2,\n    3\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet BA = sub(A, B);\n$bm_rt = angle_between_cw_te(BA, [\n    0,\n    1\n]);"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":0,"nm":"MAP || Dice || square_1 || SIDE  [1]","refId":"comp_4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\nvar findIndex;\n'use native operators';\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst ex_layer = thisComp.layer('square_2');\nconst transparency_value = ex_layer.effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nlet extr_data_arr;\nlet srt_ind = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\n$bm_rt = value = is_side_visible ? opacity_value : transparency_value;"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[0,0],"ix":1}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n}\n$bm_rt = C;"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet AB = sub(B, A);\nlet scaleX = $bm_div($bm_mul(100, len_vec(AB)), thisLayer.height);\n$bm_rt = scaleX;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfunction findIndex(arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n;\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet D = vertices[3];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nD = transform2D_apply(layer_transform_matrix, D);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    D = transform2D_apply(parent_transform_matrix, D);\n}\nlet AD = sub(D, A);\nlet w = thisLayer.width;\nlet skw = effect('Transform')('ADBE Geometry2-0005').value;\nlet cos_sk = Math.cos($bm_div($bm_mul(skw, Math.PI), 180));\nlet scaleY = $bm_div($bm_mul(100, len_vec(AD)), $bm_div(w, cos_sk));\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    scaleY = $bm_neg(scaleY);\n}\n$bm_rt = scaleY;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\nvar angle_between_cw_te, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, findIndex;\n'use native operators';\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet CB = sub(B, C);\nconst rot = effect('Transform')('ADBE Geometry2-0007').value;\nconst rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\nconst x_rot = [\n    Math.cos(rot_rad),\n    Math.sin(rot_rad)\n];\nlet skw = angle_between_cw_te(CB, x_rot);\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n    skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n}\n;\n$bm_rt = skw;"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, angle_between_cw_te;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    1,\n    2\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet BA = sub(A, B);\n$bm_rt = angle_between_cw_te(BA, [\n    0,\n    1\n]);"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":0,"nm":"MAP || Dice || square_1 || SIDE  [0]","refId":"comp_5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\nvar findIndex;\n'use native operators';\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst ex_layer = thisComp.layer('square_2');\nconst transparency_value = ex_layer.effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nlet extr_data_arr;\nlet srt_ind = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\n$bm_rt = value = is_side_visible ? opacity_value : transparency_value;"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[0,0],"ix":1}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n}\n$bm_rt = C;"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet AB = sub(B, A);\nlet scaleX = $bm_div($bm_mul(100, len_vec(AB)), thisLayer.height);\n$bm_rt = scaleX;"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar dot_, len_vec, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix;\n'use native operators';\ndot_ = function (a, b) {\n    return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfunction findIndex(arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n;\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet D = vertices[3];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nD = transform2D_apply(layer_transform_matrix, D);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    D = transform2D_apply(parent_transform_matrix, D);\n}\nlet AD = sub(D, A);\nlet w = thisLayer.width;\nlet skw = effect('Transform')('ADBE Geometry2-0005').value;\nlet cos_sk = Math.cos($bm_div($bm_mul(skw, Math.PI), 180));\nlet scaleY = $bm_div($bm_mul(100, len_vec(AD)), $bm_div(w, cos_sk));\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    scaleY = $bm_neg(scaleY);\n}\n$bm_rt = scaleY;"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\nvar angle_between_cw_te, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, findIndex;\n'use native operators';\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nfindIndex = function (arr, target) {\n    for (var i = 0; i < arr.length; i++) {\n        var innerArray = arr[i];\n        if (innerArray[0] === target[0] && innerArray[1] === target[1]) {\n            return i;\n        }\n    }\n    return -1;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet srt_ind = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    srt_ind = extr_data_arr[7];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet C = vertices[2];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nC = transform2D_apply(layer_transform_matrix, C);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    C = transform2D_apply(parent_transform_matrix, C);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet CB = sub(B, C);\nconst rot = effect('Transform')('ADBE Geometry2-0007').value;\nconst rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\nconst x_rot = [\n    Math.cos(rot_rad),\n    Math.sin(rot_rad)\n];\nlet skw = angle_between_cw_te(CB, x_rot);\nvar side_index = findIndex(srt_ind, front_vertex_indices);\nconst num_facing_sides = extr_data_arr[10];\nconst is_side_visible = side_index <= $bm_sub(num_facing_sides, 1);\nif (!is_side_visible) {\n    skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n    skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n}\n;\n$bm_rt = skw;"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\nvar multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_matrix, angle_between_cw_te;\n'use native operators';\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_matrix = function (anchor, pos, scale, rot) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nlet ex_layer = thisComp.layer('square_2');\nlet extr_data_arr;\nlet points_front_3D = [];\nlet points_back_3D = [];\nlet is_clockwise = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n    is_clockwise = extr_data_arr[9];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n    is_clockwise = extr_data_arr[9] == 'true';\n}\nconst front_vertex_indices = [\n    0,\n    1\n];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\nlet vertices = [\n    points_front_2D[front_vertex_indices[1]],\n    points_front_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[0]],\n    points_back_2D[front_vertex_indices[1]]\n];\nif (is_clockwise) {\n    vertices = [\n        vertices[1],\n        vertices[0],\n        vertices[3],\n        vertices[2]\n    ];\n}\nlet A = vertices[0];\nlet B = vertices[1];\nvar l_pos = ex_layer.transform.position;\nvar l_anchor = ex_layer.transform.anchorPoint;\nvar l_rot = ex_layer.transform.rotation;\nvar l_sca = ex_layer.transform.scale;\nconst layer_transform_matrix = get_transform_matrix(l_anchor, l_pos, l_sca, l_rot);\nA = transform2D_apply(layer_transform_matrix, A);\nB = transform2D_apply(layer_transform_matrix, B);\nvar hasParent = ex_layer.hasParent;\nif (hasParent) {\n    var p_pos = ex_layer.parent.transform.position;\n    var p_anchor = ex_layer.parent.transform.anchorPoint;\n    var p_rot = ex_layer.parent.transform.rotation;\n    var p_sca = ex_layer.parent.transform.scale;\n    const parent_transform_matrix = get_transform_matrix(p_anchor, p_pos, p_sca, p_rot);\n    A = transform2D_apply(parent_transform_matrix, A);\n    B = transform2D_apply(parent_transform_matrix, B);\n}\nlet BA = sub(A, B);\n$bm_rt = angle_between_cw_te(BA, [\n    0,\n    1\n]);"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":0,"nm":"MAP || Dice || square_1 || BACK","refId":"comp_6","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\n$bm_rt = thisComp.layer('square_2').effect('Extrudalizer')('Back opacity readout');"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[150,150],"ix":1,"x":"var $bm_rt;\nconst ex_layer = thisComp.layer('square_2');\nconst is_front = false;\nconst precomp_width = 300;\nlet extr_data_arr = [];\nlet is_facing_us = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    $bm_rt = is_facing_us = extr_data_arr[8];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    $bm_rt = is_facing_us = extr_data_arr[8] == 'true';\n}\nfunction logicalXOR(input1, input2) {\n    return input1 && !input2 || !input1 && input2;\n}\nif (logicalXOR(is_front, is_facing_us)) {\n    $bm_rt = value = [\n        precomp_width,\n        0\n    ];\n} else {\n    $bm_rt = value = [\n        0,\n        0\n    ];\n}"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'back';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 17;\nconst POS_INDEX_LOTTIE = 0;\nconst POS_INDEX_1 = 0;\nconst POS_INDEX_2 = 1;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let pos = [\n        0,\n        0\n    ];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        $bm_rt = pos = transform_effect_controls[POS_INDEX_LOTTIE];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        $bm_rt = pos = [\n            transform_effect_controls[POS_INDEX_1],\n            transform_effect_controls[POS_INDEX_2]\n        ];\n    }\n}"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'back';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 17;\nconst control_index_lt = 3;\nconst control_index_ae = 4;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = thisLayer.height;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'back';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 17;\nconst control_index_lt = 4;\nconst control_index_ae = 5;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = $bm_neg(thisLayer.width);\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'back';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 17;\nconst control_index_lt = 2;\nconst control_index_ae = 3;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = 1;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'back';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 17;\nconst control_index_lt = 1;\nconst control_index_ae = 2;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = 1;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9,"x":"var $bm_rt;\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'Back';\nconst face_opacity = ex_layer.effect('Extrudalizer')(face + ' opacity readout').value;\n$bm_rt = face_opacity;"}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":0,"nm":"MAP || Dice || square_1 || FRONT","refId":"comp_7","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11,"x":"var $bm_rt;\n$bm_rt = thisComp.layer('square_2').effect('Extrudalizer')('Front opacity readout');"},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":35,"nm":"Transform","np":14,"mn":"ADBE Geometry2","ix":1,"en":1,"ef":[{"ty":3,"nm":"Anchor Point","mn":"ADBE Geometry2-0001","ix":1,"v":{"a":0,"k":[150,150],"ix":1,"x":"var $bm_rt;\nconst ex_layer = thisComp.layer('square_2');\nconst is_front = true;\nconst precomp_width = 300;\nlet extr_data_arr = [];\nlet is_facing_us = false;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    $bm_rt = is_facing_us = extr_data_arr[8];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    $bm_rt = is_facing_us = extr_data_arr[8] == 'true';\n}\nfunction logicalXOR(input1, input2) {\n    return input1 && !input2 || !input1 && input2;\n}\nif (logicalXOR(is_front, is_facing_us)) {\n    $bm_rt = value = [\n        precomp_width,\n        0\n    ];\n} else {\n    $bm_rt = value = [\n        0,\n        0\n    ];\n}"}},{"ty":3,"nm":"Position","mn":"ADBE Geometry2-0002","ix":2,"v":{"a":0,"k":[150,150],"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'front';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 16;\nconst POS_INDEX_LOTTIE = 0;\nconst POS_INDEX_1 = 0;\nconst POS_INDEX_2 = 1;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let pos = [\n        0,\n        0\n    ];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        $bm_rt = pos = transform_effect_controls[POS_INDEX_LOTTIE];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        $bm_rt = pos = [\n            transform_effect_controls[POS_INDEX_1],\n            transform_effect_controls[POS_INDEX_2]\n        ];\n    }\n}"}},{"ty":7,"nm":"Uniform Scale","mn":"ADBE Geometry2-0011","ix":3,"v":{"a":0,"k":0,"ix":3}},{"ty":0,"nm":"Scale Height","mn":"ADBE Geometry2-0003","ix":4,"v":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'front';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 16;\nconst control_index_lt = 3;\nconst control_index_ae = 4;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = thisLayer.height;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Scale Width","mn":"ADBE Geometry2-0004","ix":5,"v":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'front';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 16;\nconst control_index_lt = 4;\nconst control_index_ae = 5;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = thisLayer.width;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Skew","mn":"ADBE Geometry2-0005","ix":6,"v":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'front';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 16;\nconst control_index_lt = 2;\nconst control_index_ae = 3;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = 1;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Skew Axis","mn":"ADBE Geometry2-0006","ix":7,"v":{"a":0,"k":0,"ix":7,"x":"var $bm_rt;\n$bm_rt = $bm_neg(effect('Transform')('ADBE Geometry2-0007'));"}},{"ty":0,"nm":"Rotation","mn":"ADBE Geometry2-0007","ix":8,"v":{"a":0,"k":0,"ix":8,"x":"var $bm_rt;\n'use native operators';\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'front';\nconst use_bb = ex_layer.effect('Extrudalizer')('Compute 3D ' + face + ' bounding box').value;\nconst data_index = 16;\nconst control_index_lt = 1;\nconst control_index_ae = 2;\nif (!use_bb) {\n    $bm_rt = value;\n} else {\n    let extr_data_arr;\n    let transform_effect_controls = [];\n    let control_value;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        transform_effect_controls = extr_data_arr[data_index];\n        control_value = transform_effect_controls[control_index_lt];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        transform_effect_controls = extr_data_arr[data_index].split(',').map(s => parseFloat(s));\n        control_value = parseFloat(transform_effect_controls[control_index_ae]);\n    }\n    const k = 1;\n    control_value = $bm_div(control_value, k);\n    $bm_rt = control_value;\n}"}},{"ty":0,"nm":"Opacity","mn":"ADBE Geometry2-0008","ix":9,"v":{"a":0,"k":100,"ix":9,"x":"var $bm_rt;\nconst ex_layer = thisComp.layer('square_2');\nconst face = 'Front';\nconst face_opacity = ex_layer.effect('Extrudalizer')(face + ' opacity readout').value;\n$bm_rt = face_opacity;"}},{"ty":7,"nm":"Use Composition’s Shutter Angle","mn":"ADBE Geometry2-0009","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Shutter Angle","mn":"ADBE Geometry2-0010","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":7,"nm":"Sampling","mn":"ADBE Geometry2-0012","ix":12,"v":{"a":0,"k":1,"ix":12}}]}],"w":300,"h":300,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":3,"nm":"Null 5","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[492,500,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[72,72,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":750,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"square_3","parent":9,"sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":241,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":271,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":272,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":331,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":332,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":362,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":363,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":422,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":423,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":453,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":454,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":513,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":514,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":544,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":545,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":604,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":605,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":635,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":636,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":695,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.328],"y":[0]},"t":696,"s":[100]},{"t":726,"s":[100]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[-0.421,-0.084,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.833,0.833,0.833],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":0,"s":[94.737,94.737,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":180,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":239,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":241,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":271,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":272,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":330,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":332,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":362,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":363,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":421,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":423,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":453,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":454,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":512,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":514,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":544,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":545,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":603,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":605,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":635,"s":[86.4,86.4,100]},{"i":{"x":[0.656,0.656,0.656],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":636,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.338,0.338,0.338],"y":[0,0,0]},"t":694,"s":[94.737,94.737,100]},{"i":{"x":[0.672,0.672,0.672],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":696,"s":[86.4,86.4,100]},{"t":726,"s":[86.4,86.4,100]}],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":300,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,0,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[-30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[330]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[-450]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[-450]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[-30]},{"t":696,"s":[-180]}],"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[750]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[900]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[900]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[30]},{"t":696,"s":[810]}],"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[-360]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[-360]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[-360]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[-360]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[0]},{"t":696,"s":[-360]}],"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":0,"k":0,"ix":15}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":1,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0,0.329411774874,0.454901993275,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":239,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":241,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":271,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":332,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":362,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":421,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":423,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":453,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":512,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":514,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":544,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":603,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":605,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":635,"s":[80]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":694,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":696,"s":[80]},{"t":726,"s":[80]}],"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[0,0.352941185236,0.490196108818,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0,0.352941185236,0.490196108818,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":100,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[0,0],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[0,0],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.23137254902,0.529411764706,0.192156862745,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":25,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[0,0,0,1],"ix":51}},{"ty":0,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":50,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":1,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[0];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[0],\n            front_bb[1]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[1];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[2],\n            front_bb[3]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[2];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[4],\n            front_bb[5]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[3];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[6],\n            front_bb[7]\n        ];\n    }\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":1,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[0];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[0],\n            back_bb[1]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[1];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[2],\n            back_bb[3]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[2];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[4],\n            back_bb[5]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[3];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[6],\n            back_bb[7]\n        ];\n    }\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[150,-150],[150,150],[-150,150],[-150,-150]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[0,0.925924921971,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":78,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5},"e":{"a":0,"k":[100,0],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[2,0],[-2,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[-4,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"L","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[0,2],[0,-2]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,-4],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"T","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[2,0],[-2,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[4,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"R","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[0,2],[0,-2]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,4],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"B","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet pos = [\n    0,\n    0\n];\nlet extr_data_arr;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    pos = extr_data_arr[12];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    pos = extr_data_arr[12].split(',').map(p => parseFloat(p));\n}\n$bm_rt = pos;"},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"PIVOT","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[10,10],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isHidden = effect('Extrudalizer')('Hide anchor point').value;\n$bm_rt = $bm_mul(!isHidden, 100);"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ANCHOR POINTS","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet points_3D = [];\nlet isPathClosed;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    points_3D = extr_data_arr[5];\n    isPathClosed = extr_data_arr[4] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    isPathClosed = extr_data_arr[4] === 'true';\n    for (var i = 0, il = points_arr.length / 3; i < il; i++) {\n        points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar dot_, adjustColorBrightness;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    dot_ = function (a, b) {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    };\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    const side_shadow_opacity_max = effect('Extrudalizer')('Sides fill shadow opacity').value;\n    const rgba = effect('Extrudalizer')('Front color').value;\n    let extr_data_arr;\n    let front_normal = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_normal = extr_data_arr[13];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_normal = extr_data_arr[13].split(',').map(p => parseFloat(p));\n    }\n    const dark_coeff = 2;\n    var brightness = $bm_div($bm_mul($bm_mul(dark_coeff, $bm_sub(100, side_shadow_opacity_max)), Math.abs(dot_(front_normal, [\n        0,\n        0,\n        1\n    ]))), 100);\n    color = adjustColorBrightness(rgba, brightness);\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar dot_, adjustColorBrightness;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    dot_ = function (a, b) {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    };\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    const side_shadow_opacity_max = effect('Extrudalizer')('Sides fill shadow opacity').value;\n    const rgba = effect('Extrudalizer')('Front color').value;\n    let extr_data_arr;\n    let front_normal = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_normal = extr_data_arr[13];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_normal = extr_data_arr[13].split(',').map(p => parseFloat(p));\n    }\n    const dark_coeff = 2;\n    var brightness = $bm_div($bm_mul($bm_mul(dark_coeff, $bm_sub(100, side_shadow_opacity_max)), Math.abs(dot_(front_normal, [\n        0,\n        0,\n        1\n    ]))), 100);\n    color = adjustColorBrightness(rgba, brightness);\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Front opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet is_facing_towards_us;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    is_facing_towards_us = extr_data_arr[8] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    is_facing_towards_us = extr_data_arr[8] === 'true';\n}\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet points_3D = [];\nlet isPathClosed;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    points_3D = extr_data_arr[6];\n    isPathClosed = extr_data_arr[4] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    isPathClosed = extr_data_arr[4] === 'true';\n    for (var i = 0, il = points_arr.length / 3; i < il; i++) {\n        points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar dot_, adjustColorBrightness;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    dot_ = function (a, b) {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    };\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    const side_shadow_opacity_max = effect('Extrudalizer')('Sides fill shadow opacity').value;\n    const rgba = effect('Extrudalizer')('Back color').value;\n    let extr_data_arr;\n    let front_normal = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_normal = extr_data_arr[13];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_normal = extr_data_arr[13].split(',').map(p => parseFloat(p));\n    }\n    const dark_coeff = 2;\n    var brightness = $bm_div($bm_mul($bm_mul(dark_coeff, $bm_sub(100, side_shadow_opacity_max)), Math.abs(dot_(front_normal, [\n        0,\n        0,\n        1\n    ]))), 100);\n    color = adjustColorBrightness(rgba, brightness);\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar dot_, adjustColorBrightness;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    dot_ = function (a, b) {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    };\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    const side_shadow_opacity_max = effect('Extrudalizer')('Sides fill shadow opacity').value;\n    const rgba = effect('Extrudalizer')('Back color').value;\n    let extr_data_arr;\n    let front_normal = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        front_normal = extr_data_arr[13];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_normal = extr_data_arr[13].split(',').map(p => parseFloat(p));\n    }\n    const dark_coeff = 2;\n    var brightness = $bm_div($bm_mul($bm_mul(dark_coeff, $bm_sub(100, side_shadow_opacity_max)), Math.abs(dot_(front_normal, [\n        0,\n        0,\n        1\n    ]))), 100);\n    color = adjustColorBrightness(rgba, brightness);\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Back opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    try {\n        const frontOpacity = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity.value;\n        $bm_rt = value = $bm_sub(100, frontOpacity);\n    } catch (e) {\n        $bm_rt = 100;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 0;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = true ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[0][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[0];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = false ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[0][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[0];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 1;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = true ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[1][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[1];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = false ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[1][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[1];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 2;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = true ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[2][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[2];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = false ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[2][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[2];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 3;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = true ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[3][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[3];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    color = false ? effect('Extrudalizer')('Edge stroke color').value : [\n        0,\n        0,\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let sidecolors = [];\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        sidecolors = extr_data_arr[11];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        let sidecolors_arr = extr_data_arr[11].split(',').map(p => parseFloat(p));\n        for (var i = 0, il = sidecolors_arr.length / 4; i < il; i++) {\n            sidecolors.push(sidecolors_arr.slice($bm_mul(4, i), $bm_sum($bm_mul(4, i), 4)));\n        }\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    try {\n        effect('FACE ' + '0');\n        const currentIndex = srt_ind[3][0];\n        color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n    } catch (e) {\n        color = sidecolors[3];\n    }\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_3').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 0","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":765,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"square_2","hd":true,"sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":239,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":271,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":272,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":331,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":362,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":363,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":421,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":422,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":453,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":454,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":512,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":513,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":544,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":545,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":603,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":604,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":635,"s":[0]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.167],"y":[0]},"t":636,"s":[100]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":694,"s":[100]},{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":695,"s":[0]},{"t":726,"s":[0]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[499.6,501.52,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.833,0.833,0.833],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":0,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":180,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":241,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":271,"s":[171,171,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":272,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":332,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":362,"s":[171,171,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":363,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":423,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":453,"s":[171,171,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":454,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":514,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":544,"s":[171,171,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":545,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":605,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":635,"s":[171,171,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":636,"s":[95,95,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":696,"s":[95,95,100]},{"t":726,"s":[171,171,100]}],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":300,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,0,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[-30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[330]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[-30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[-450]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[-450]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[-30]},{"t":696,"s":[-180]}],"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[750]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[900]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[900]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[30]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[810]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[810]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[30]},{"t":696,"s":[810]}],"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.167],"y":[0.167]},"t":180,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":181,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":241,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":271,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":272,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":332,"s":[-360]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":362,"s":[-360]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":363,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":423,"s":[-360]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":453,"s":[-360]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":454,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":514,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":544,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":545,"s":[0]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":605,"s":[-720]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":635,"s":[-720]},{"i":{"x":[0.401],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":636,"s":[0]},{"t":696,"s":[-360]}],"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":0,"k":0,"ix":15}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0,0.329411774874,0.454901993275,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[0,0.352941185236,0.490196108818,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0,0.352941185236,0.490196108818,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":100,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[0,0],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[0,0],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.23137254902,0.529411764706,0.192156862745,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":25,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[0,0,0,1],"ix":51}},{"ty":0,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":100,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":1,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[0];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[0],\n            front_bb[1]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[1];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[2],\n            front_bb[3]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[2];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[4],\n            front_bb[5]\n        ];\n    }\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let front_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        front_bb = extr_data_arr[14];\n        $bm_rt = front_bb[3];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        front_bb = extr_data_arr[14].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            front_bb[6],\n            front_bb[7]\n        ];\n    }\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":1,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[0];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[0],\n            back_bb[1]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[1];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[2],\n            back_bb[3]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[2];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[4],\n            back_bb[5]\n        ];\n    }\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\n'use native operators';\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    let extr_data_arr;\n    let back_bb;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        back_bb = extr_data_arr[15];\n        $bm_rt = back_bb[3];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        back_bb = extr_data_arr[15].split(',').map(s => parseFloat(s));\n        $bm_rt = [\n            back_bb[6],\n            back_bb[7]\n        ];\n    }\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]},{"ty":5,"nm":"FACE 0","np":3,"mn":"ADBE Color Control","ix":2,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0,0.301960796118,0.415686309338,1],"ix":1}}]},{"ty":5,"nm":"FACE 1","np":3,"mn":"ADBE Color Control","ix":3,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.40225237608,0.70249080658,0.548722863197,1],"ix":1}}]},{"ty":5,"nm":"FACE 2","np":3,"mn":"ADBE Color Control","ix":4,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0,0.301960796118,0.415686309338,1],"ix":1}}]},{"ty":5,"nm":"FACE 3","np":3,"mn":"ADBE Color Control","ix":5,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0,0.329411774874,0.454901993275,1],"ix":1}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[150,-150],[150,150],[-150,150],[-150,-150]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[0,0.925924921971,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":78,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5},"e":{"a":0,"k":[100,0],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[2,0],[-2,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[-4,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"L","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[0,2],[0,-2]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,-4],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"T","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[2,0],[-2,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[4,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"R","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[0,2],[0,-2]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"st","c":{"a":0,"k":[0.159999996424,0.159999996424,0.159999996424,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 2","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,4],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"B","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet pos = [\n    0,\n    0\n];\nlet extr_data_arr;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    pos = extr_data_arr[12];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    pos = extr_data_arr[12].split(',').map(p => parseFloat(p));\n}\n$bm_rt = pos;"},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"PIVOT","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[10,10],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isHidden = effect('Extrudalizer')('Hide anchor point').value;\n$bm_rt = $bm_mul(!isHidden, 100);"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ANCHOR POINTS","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet points_3D = [];\nlet isPathClosed;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_3D = extr_data_arr[5];\n    isPathClosed = extr_data_arr[4] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    isPathClosed = extr_data_arr[4] === 'true';\n    for (var i = 0, il = points_arr.length / 3; i < il; i++) {\n        points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Front color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Front opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet is_facing_towards_us;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    is_facing_towards_us = extr_data_arr[8] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    is_facing_towards_us = extr_data_arr[8] === 'true';\n}\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nlet extr_data_arr;\nlet points_3D = [];\nlet isPathClosed;\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    points_3D = extr_data_arr[6];\n    isPathClosed = extr_data_arr[4] === true;\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    isPathClosed = extr_data_arr[4] === 'true';\n    for (var i = 0, il = points_arr.length / 3; i < il; i++) {\n        points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Back color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Back opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    try {\n        const frontOpacity = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity.value;\n        $bm_rt = value = $bm_sub(100, frontOpacity);\n    } catch (e) {\n        $bm_rt = 100;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 0;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    effect('FACE ' + '0');\n    const side_index = 0;\n    let extr_data_arr;\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 1;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    effect('FACE ' + '0');\n    const side_index = 1;\n    let extr_data_arr;\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 2;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    effect('FACE ' + '0');\n    const side_index = 2;\n    let extr_data_arr;\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\n'use native operators';\nconst side_index = 3;\nlet extr_data_arr;\nlet srt_ind = [];\nlet points_front_3D = [];\nlet points_back_3D = [];\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n    srt_ind = extr_data_arr[7];\n    points_front_3D = extr_data_arr[5];\n    points_back_3D = extr_data_arr[6];\n} catch (err) {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n    extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n    let front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\n    let back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    for (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n        points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n        points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    }\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[255,255,0,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[255,0,255,1],"ix":4,"x":"var $bm_rt;\nvar sorted_indices;\n'use native operators';\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    effect('FACE ' + '0');\n    const side_index = 3;\n    let extr_data_arr;\n    let srt_ind = [];\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        srt_ind = extr_data_arr[7];\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        sorted_indices = extr_data_arr[7].split(',').map(p => parseInt(p));\n        for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n            srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n        }\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\n'use native operators';\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    let extr_data_arr;\n    let isPathClosed;\n    try {\n        _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n        extr_data_arr = _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'];\n        $bm_rt = isPathClosed = extr_data_arr[4] === true;\n    } catch (err) {\n        const extr_data = thisComp.layer('EXTRUDALIZER DATA || square_2').text.sourceText;\n        extr_data_arr = extr_data.split(';');\n        $bm_rt = isPathClosed = extr_data_arr[4] === 'true';\n    }\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[10];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 0","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":765,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":10,"ty":5,"nm":"EXTRUDALIZER DATA || square_2","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[500,500,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":150,"f":"Teko-SemiBold","t":"","ca":1,"j":1,"tr":0,"lh":180,"ls":0,"fc":[0,0,0]},"t":0}],"x":"var $bm_rt;\nvar dot_, cross_vec, len_vec, arraysEqual, getNormal, get2D_projection, getBoundingBox, getPositionMatrix, getRotationMatrix, getScaleMatrix, getIdentity, translate, rotateX, rotateY, rotateZ, multiplyMatrixVector, multiplyMatrices, multiplyArrayOfMatrices, transformMatrix, make_transform, getPoint, getArea, isClockwise, getCentroid, getCentroidPro, hasNoneZeroValues, angle_between, angle_between_cw, angle_between_cw_te, isStraightLine_w_delta, isFacingTowardsUs, isVectorFacingTowardsUs, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_shape_matrix, get_transforms_from_bb, num_pts, compare_sides, sorted_sides_indices, adjustColorBrightness, lambertShader, stringify;\n'use native operators';\ndot_ = function (a, b) {\n    if (a.length == 2) {\n        return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n    } else {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    }\n};\ncross_vec = function (a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\narraysEqual = function (arr1, arr2) {\n    for (var i = 0, il = arr1.length; i < il; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\ngetNormal = function (pts, normalized) {\n    let dir = cross_vec(sub(pts[1], pts[0]), sub(pts[2], pts[0]));\n    let len_dir = len_vec(dir);\n    if (len_dir === 0) {\n        return [\n            0,\n            0,\n            0\n        ];\n    }\n    if (normalized) {\n        return div(dir, len_dir);\n    } else {\n        return dir;\n    }\n};\nget2D_projection = function (points) {\n    return points.map(v => [\n        v[0],\n        v[1]\n    ]);\n};\ngetBoundingBox = function (points) {\n    const boundingBox = {\n        left: Number.POSITIVE_INFINITY,\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        width: undefined,\n        height: undefined,\n        center: undefined\n    };\n    points.forEach(point => {\n        boundingBox.left = Math.min(boundingBox.left, point[0]);\n        boundingBox.top = Math.min(boundingBox.top, point[1]);\n        boundingBox.right = Math.max(boundingBox.right, point[0]);\n        boundingBox.bottom = Math.max(boundingBox.bottom, point[1]);\n    });\n    boundingBox.width = sub(boundingBox.right, boundingBox.left);\n    boundingBox.height = sub(boundingBox.bottom, boundingBox.top);\n    boundingBox.center = [\n        add(boundingBox.left, $bm_div(boundingBox.width, 2)),\n        add(boundingBox.top, $bm_div(boundingBox.height, 2))\n    ];\n    boundingBox.left_top = [\n        boundingBox.left,\n        boundingBox.top\n    ];\n    boundingBox.left_bottom = [\n        boundingBox.left,\n        boundingBox.bottom\n    ];\n    boundingBox.right_top = [\n        boundingBox.right,\n        boundingBox.top\n    ];\n    boundingBox.right_bottom = [\n        boundingBox.right,\n        boundingBox.bottom\n    ];\n    return boundingBox;\n};\ngetPositionMatrix = function (value) {\n    return translate(getIdentity(), value[0], value[1], $bm_neg(value[2]));\n};\ngetRotationMatrix = function (angles) {\n    const angleX = angles[0];\n    const angleY = angles[1];\n    const angleZ = angles[2];\n    var matrix = getIdentity();\n    matrix = rotateZ(matrix, $bm_div($bm_mul(angleZ, Math.PI), 180));\n    matrix = rotateY(matrix, $bm_div($bm_mul(angleY, Math.PI), 180));\n    matrix = rotateX(matrix, $bm_div($bm_mul(angleX, Math.PI), 180));\n    return matrix;\n};\ngetScaleMatrix = function (sc) {\n    return [\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ngetIdentity = function () {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ntranslate = function (matrix, x, y, z) {\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        x,\n        0,\n        1,\n        0,\n        y,\n        0,\n        0,\n        1,\n        z,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateX = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateY = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        0,\n        sin_th,\n        0,\n        0,\n        1,\n        0,\n        0,\n        $bm_neg(sin_th),\n        0,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateZ = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nmultiplyMatrixVector = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 4; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 4; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 4), j)], vector[j]));\n        }\n    }\n    return result;\n};\nmultiplyMatrices = function (matrixB, matrixA) {\n    let result = new Array(16).fill(0);\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            for (let k = 0; k < 4; k++) {\n                result[$bm_sum($bm_mul(i, 4), j)] = $bm_sum(result[$bm_sum($bm_mul(i, 4), j)], $bm_mul(matrixA[$bm_sum($bm_mul(i, 4), k)], matrixB[$bm_sum($bm_mul(k, 4), j)]));\n            }\n        }\n    }\n    return result;\n};\nmultiplyArrayOfMatrices = function (matrices) {\n    var result = matrices[0];\n    for (var i = 1, il = matrices.length; i < il; i++) {\n        result = multiplyMatrices(result, matrices[i]);\n    }\n    return result;\n};\ntransformMatrix = function (move, sc, pivot, pitch_angles, anch, orbit_angles) {\n    var mat_array = [];\n    if (sc !== 1) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getScaleMatrix(sc),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getScaleMatrix(sc));\n        }\n    }\n    mat_array.push(getPositionMatrix(move));\n    if (!arraysEqual(pitch_angles, [\n            0,\n            0,\n            0\n        ])) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getRotationMatrix(pitch_angles),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getRotationMatrix(pitch_angles));\n        }\n    }\n    if (!arraysEqual(anch, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getPositionMatrix(anch.map(i => -i)));\n    }\n    if (!arraysEqual(orbit_angles, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getRotationMatrix(orbit_angles));\n    }\n    return multiplyArrayOfMatrices(mat_array);\n};\nmake_transform = function (transform_matrix, vector) {\n    if (vector.length == 2) {\n        vector = [\n            ...vector,\n            0,\n            1\n        ];\n    } else if (vector.length == 3) {\n        vector = [\n            ...vector,\n            1\n        ];\n    }\n    var result_vector_4d = multiplyMatrixVector(transform_matrix, vector);\n    return result_vector_4d.slice(0, 3);\n};\ngetPoint = function (p1, cp1, cp2, p2, t) {\n    const x = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[0]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[0])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[0])), $bm_mul(Math.pow(t, 3), p2[0]));\n    const y = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[1]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[1])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[1])), $bm_mul(Math.pow(t, 3), p2[1]));\n    return [\n        x,\n        y\n    ];\n};\ngetArea = function (points) {\n    var area = 0;\n    for (var i = 0, il = points.length; i < il; i++) {\n        var p1 = points[i];\n        var p2 = points[(i + 1) % il];\n        area = $bm_sum(area, $bm_sub($bm_mul(p1[0], p2[1]), $bm_mul(p2[0], p1[1])));\n    }\n    return $bm_div(area, 2);\n};\nisClockwise = function (points) {\n    return getArea(points) > 0;\n};\ngetCentroid = function (vertices) {\n    var area = getArea(vertices);\n    if (area === 0) {\n        function findCenter(points) {\n            let sumX = 0;\n            let sumY = 0;\n            for (let i = 0, il = points.length; i < il; i++) {\n                const point = points[i];\n                sumX = $bm_sum(sumX, point[0]);\n                sumY = $bm_sum(sumY, point[1]);\n            }\n            const meanX = $bm_div(sumX, points.length);\n            const meanY = $bm_div(sumY, points.length);\n            return [\n                meanX,\n                meanY\n            ];\n        }\n        return findCenter(vertices);\n    }\n    let centroidX = 0;\n    let centroidY = 0;\n    const numVertices = vertices.length;\n    for (var i = 0; i < numVertices; i++) {\n        var currentVertex = vertices[i];\n        var nextVertex = vertices[(i + 1) % numVertices];\n        var commonFactor = $bm_sub($bm_mul(currentVertex[0], nextVertex[1]), $bm_mul(nextVertex[0], currentVertex[1]));\n        centroidX = $bm_sum(centroidX, $bm_mul($bm_sum(currentVertex[0], nextVertex[0]), commonFactor));\n        centroidY = $bm_sum(centroidY, $bm_mul($bm_sum(currentVertex[1], nextVertex[1]), commonFactor));\n    }\n    var scaleFactor = $bm_div(1, $bm_mul(6, area));\n    centroidX *= scaleFactor;\n    centroidY *= scaleFactor;\n    return [\n        centroidX,\n        centroidY\n    ];\n};\ngetCentroidPro = function (vertices) {\n    const bb = getBoundingBox(vertices);\n    return {\n        0: bb.left_top,\n        1: [\n            (bb.left_top[0] + bb.right_top[0]) / 2,\n            bb.left_top[1]\n        ],\n        2: bb.right_top,\n        3: [\n            (bb.left_top[0] + bb.left_bottom[0]) / 2,\n            (bb.left_top[1] + bb.left_bottom[1]) / 2\n        ],\n        4: getCentroid(vertices),\n        5: [\n            (bb.right_top[0] + bb.right_bottom[0]) / 2,\n            (bb.right_top[1] + bb.right_bottom[1]) / 2\n        ],\n        6: bb.left_bottom,\n        7: [\n            (bb.left_bottom[0] + bb.right_bottom[0]) / 2,\n            bb.left_bottom[1]\n        ],\n        8: bb.right_bottom\n    };\n};\nhasNoneZeroValues = function (array2D) {\n    return array2D.some(array => array.some(value => value !== 0));\n};\nangle_between = function (a, b) {\n    const dot_prod = dot_(a, b);\n    const mag_a = len_vec(a);\n    const mag_b = len_vec(b);\n    const cos_ = $bm_div(dot_prod, $bm_mul(mag_a, mag_b));\n    return cos_;\n};\nangle_between_cw = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    angle = angle >= 0 ? angle : $bm_sum($bm_mul(2, Math.PI), angle);\n    const degrees = $bm_mul(angle, $bm_div(180, Math.PI));\n    return degrees;\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nisStraightLine_w_delta = function (cp1, cp2, delta) {\n    return angle_between(cp1, cp2) <= -delta;\n};\nisFacingTowardsUs = function (p1, p2) {\n    return dot_(sub(p2, p1), [\n        0,\n        0,\n        1\n    ]) > 0;\n};\nisVectorFacingTowardsUs = function (v) {\n    return dot_(v, [\n        0,\n        0,\n        -1\n    ]) > 0;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_shape_matrix = function (anchor, pos, scale, rot, skew, skew_axis) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (skew !== 0) {\n        const sk_angle = $bm_div($bm_mul(skew, Math.PI), 180);\n        const Sk = [\n            1,\n            Math.tan(-sk_angle),\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            1\n        ];\n        if (skew_axis !== 0) {\n            const sk_axis_angle = $bm_div($bm_mul(skew_axis, Math.PI), 180);\n            const cos_sk = Math.cos(sk_axis_angle);\n            const sin_sk = Math.sin(sk_axis_angle);\n            const Rz = [\n                cos_sk,\n                -sin_sk,\n                0,\n                sin_sk,\n                cos_sk,\n                0,\n                0,\n                0,\n                1\n            ];\n            const Rz_inv = [\n                cos_sk,\n                sin_sk,\n                0,\n                -sin_sk,\n                cos_sk,\n                0,\n                0,\n                0,\n                1\n            ];\n            const SkM = multiplyArrayOfMatrices3x3([\n                Rz_inv,\n                Sk,\n                Rz\n            ]);\n            mat_array.push(SkM);\n        } else {\n            mat_array.push(Sk);\n        }\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nget_transforms_from_bb = function (bb, extr_transform_matrix, layer_transform_matrix, parent_transform_matrix, is_front, front_facing_towards_us, mode) {\n    let bb_transformed_3D = [];\n    if (front_facing_towards_us) {\n        bb_transformed_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom,\n            bb.right_bottom\n        ];\n    } else {\n        bb_transformed_3D = [\n            bb.right_top,\n            bb.left_top,\n            bb.right_bottom,\n            bb.left_bottom\n        ];\n    }\n    bb_transformed_3D = bb_transformed_3D.map(pnt => make_transform(extr_transform_matrix, pnt));\n    let bb_transformed_2D = get2D_projection(bb_transformed_3D);\n    bb_transformed_2D = bb_transformed_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    if (parent_transform_matrix) {\n        bb_transformed_2D = bb_transformed_2D.map(p => transform2D_apply(parent_transform_matrix, p));\n    }\n    const ex_left_top = bb_transformed_2D[0], ex_right_top = bb_transformed_2D[1], ex_left_bottom = bb_transformed_2D[2], ex_right_bottom = bb_transformed_2D[3];\n    let transform_effect_controls = [];\n    if (mode & 1) {\n        const bb_pos = ex_left_top;\n        const ex_AD = sub(ex_left_bottom, ex_left_top);\n        const rot = angle_between_cw_te(ex_AD, [\n            0,\n            1\n        ]);\n        const ex_AB = sub(ex_right_top, ex_left_top);\n        const rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\n        const x_rot = [\n            Math.cos(rot_rad),\n            Math.sin(rot_rad)\n        ];\n        let skw = angle_between_cw_te(ex_AB, x_rot);\n        if (!front_facing_towards_us) {\n            skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n            skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n        }\n        ;\n        let extra_skew_arr = [];\n        if (Math.abs(skw) > 70) {\n            const max_count = 7;\n            let count = 1;\n            let skew_ = Math.abs(skw);\n            const tan_70 = Math.tan(degreesToRadians(70));\n            while (skew_ > 70 && count < max_count) {\n                skew_ = radiansToDegrees(Math.atan($bm_sub(Math.tan(degreesToRadians(skew_)), tan_70)));\n                extra_skew_arr.push(skw > 0 ? skew_ : -skew_);\n                count++;\n            }\n        }\n        const scaleY = $bm_mul(100, len_vec(ex_AD));\n        const angle_AB_AD = angle_between_cw_te(ex_AD, ex_AB);\n        const beta = $bm_sub($bm_sub(180, angle_AB_AD), skw);\n        const scaleX_coeff = $bm_div(Math.sin($bm_div($bm_mul(beta, Math.PI), 180)), Math.sin($bm_div($bm_mul(angle_AB_AD, Math.PI), 180)));\n        let scaleX = $bm_div($bm_mul(100, len_vec(ex_AB)), scaleX_coeff);\n        if (!front_facing_towards_us) {\n            scaleX = $bm_neg(scaleX);\n        }\n        transform_effect_controls = [\n            bb_pos,\n            rot,\n            skw,\n            scaleY,\n            scaleX,\n            extra_skew_arr\n        ];\n    }\n    let transform_layer_controls = [];\n    if (mode & 2) {\n        const tl_AB = sub(bb.right_top, bb.left_top);\n        const tl_AD = sub(bb.left_bottom, bb.left_top);\n        const tl_scaleX_coeff = 100;\n        const tl_scaleY_coeff = 100;\n        const tl_bb_anchor = bb.left_top;\n        let tl_bb_pos = ex_left_top;\n        const tl_ex_AB = sub(ex_right_top, ex_left_top);\n        let tl_bb_theta = angle_between_cw(tl_AB, tl_ex_AB);\n        let tl_bb_scx = $bm_div($bm_mul(tl_scaleX_coeff, len_vec(tl_ex_AB)), len_vec(tl_AB));\n        const tl_ex_AD = sub(ex_left_bottom, ex_left_top);\n        const tl_bb_th_rad = $bm_mul(tl_bb_theta, $bm_div(Math.PI, 180));\n        const tl_cos_th = Math.cos(tl_bb_th_rad);\n        const tl_sin_th = Math.sin(tl_bb_th_rad);\n        const tl_AD_rot = [\n            tl_AD[0] * tl_cos_th - tl_AD[1] * tl_sin_th,\n            tl_AD[0] * tl_sin_th + tl_AD[1] * tl_cos_th\n        ];\n        let tl_skew = angle_between_cw(tl_AD_rot, tl_ex_AD);\n        tl_skew = tl_skew < 90 ? tl_skew : $bm_sub(tl_skew, 360);\n        const tl_sk_rad = $bm_div($bm_mul(tl_skew, Math.PI), 180);\n        const tl_AD_skew = [\n            tl_AD[0] + Math.tan(-tl_sk_rad) * tl_AD[1],\n            tl_AD[1]\n        ];\n        const tl_bb_scy = $bm_div($bm_mul(tl_scaleY_coeff, len_vec(tl_ex_AD)), len_vec(tl_AD_skew));\n        if (front_facing_towards_us && !is_front || !front_facing_towards_us && is_front) {\n            tl_bb_scx = $bm_neg(tl_bb_scx);\n            tl_bb_pos = $bm_sum(tl_bb_pos, tl_ex_AB);\n        }\n        transform_layer_controls = [\n            tl_bb_anchor[0],\n            tl_bb_anchor[1],\n            tl_bb_pos[0],\n            tl_bb_pos[1],\n            tl_bb_theta,\n            tl_bb_scx,\n            tl_bb_scy,\n            tl_skew\n        ];\n    }\n    return {\n        'boundingBoxTransformed': bb_transformed_2D,\n        'transformEffectControls': transform_effect_controls,\n        'transformLayerControls': transform_layer_controls\n    };\n};\nconst shape_layer = thisComp.layer('square_2');\nconst shape = shape_layer(2)(1);\nconst shape_contents = shape(2);\nconst targetPath = shape_contents(1)(2);\nconst is_path_closed = targetPath.isClosed();\nconst extrudalizer = shape_layer('ADBE Effect Parade')('Pseudo/Extrudalizer');\nconst depth = extrudalizer('Extrusion depth').value;\nlet anchor = extrudalizer('Position').value;\nanchor = [\n    $bm_neg(anchor[0]),\n    anchor[1],\n    anchor[2]\n];\nconst angleX = extrudalizer('X Rotation').value;\nconst angleY = extrudalizer('Y Rotation').value;\nconst angleZ = extrudalizer('Z Rotation').value;\nconst pivot_angleX = extrudalizer('Pitch (x)').value;\nconst pivot_angleY = extrudalizer('Yaw (y)').value;\nconst pivot_angleZ = extrudalizer('Roll (z)').value;\nconst scale_front = $bm_div(extrudalizer('Front scale').value, 100);\nconst scale_back = $bm_div(extrudalizer('Back scale').value, 100);\nconst use_bb_front = extrudalizer('Compute 3D front bounding box').value;\nconst use_bb_back = extrudalizer('Compute 3D back bounding box').value;\nlet pnts = targetPath.points();\nlet inTangents = targetPath.inTangents();\nlet outTangents = targetPath.outTangents();\nconst is_front_clockwise = isClockwise(pnts);\nconst shape_transform = shape.transform;\nconst s_anchor = shape_transform.anchorPoint;\nconst s_pos = shape_transform.position;\nconst s_scale = shape_transform.scale;\nconst s_rot = shape_transform.rotation;\nconst s_skew = shape_transform.skew;\nconst s_skew_axis = shape_transform.skewAxis;\nconst shape_transform_matrix = get_transform_shape_matrix(s_anchor, s_pos, s_scale, s_rot, s_skew, s_skew_axis);\nconst layer_transform = shape_layer.transform;\nconst l_anchor = layer_transform.anchorPoint;\nconst l_pos = layer_transform.position;\nconst l_scale = layer_transform.scale;\nconst l_rot = layer_transform.rotation;\nconst layer_transform_matrix = get_transform_shape_matrix(l_anchor, l_pos, l_scale, l_rot, 0, 0);\nlet subdivs = 1;\nlet num_pnts = pnts.length;\nif (hasNoneZeroValues(inTangents) || hasNoneZeroValues(outTangents)) {\n    subdivs = 5;\n    let pointsF = [];\n    for (var i = 0; i < num_pnts; i++) {\n        pointsF.push(pnts[i]);\n        if (!is_path_closed && i == num_pnts - 1) {\n            break;\n        }\n        var p1 = pnts[i], p2 = pnts[(i + 1) % num_pnts];\n        var out1 = outTangents[i], in2 = inTangents[(i + 1) % num_pnts];\n        var cp1 = add(p1, out1), cp2 = add(p2, in2);\n        var len_out1 = len_vec(out1), len_in2 = len_vec(in2);\n        var len_p1p2 = len_vec(sub(p2, p1));\n        if (len_out1 !== 0 || len_in2 !== 0) {\n            var a = len_out1 === 0 ? sub(p2, p1) : out1;\n            var b = len_in2 === 0 ? sub(p1, p2) : in2;\n            if (!isStraightLine_w_delta(a, b, 0.999) && (len_out1 > len_p1p2 * 0.02 || len_in2 > len_p1p2 * 0.02)) {\n                for (var j = 1; j < subdivs; j++) {\n                    var t = $bm_div(j, subdivs);\n                    pointsF.push(getPoint(p1, cp1, cp2, p2, t));\n                }\n            }\n        }\n    }\n    pnts = pointsF;\n}\npnts = pnts.map(p => transform2D_apply(shape_transform_matrix, p));\nnum_pts = pnts.length;\nconst zero_center_point = getCentroidPro(pnts)[4];\nlet z_coord = 0;\nswitch (1) {\ncase 0:\n    z_coord = $bm_div($bm_neg(depth), 2);\n    break;\ncase 1:\n    z_coord = 0;\n    break;\ncase 2:\n    z_coord = $bm_div(depth, 2);\n    break;\n}\n;\nconst zero_center_point_3D = [\n    ...zero_center_point,\n    z_coord\n];\nconst pivot_matrix = transformMatrix([\n    0,\n    0,\n    z_coord\n], 1, [\n    0,\n    0,\n    0\n], [\n    0,\n    0,\n    0\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst pivot_position = make_transform(pivot_matrix, zero_center_point);\nconst tr_front_mat = transformMatrix([\n    0,\n    0,\n    $bm_div($bm_neg(depth), 2)\n], scale_front, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst tr_back_mat = transformMatrix([\n    0,\n    0,\n    $bm_div(depth, 2)\n], scale_back, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst rot_matrix = transformMatrix([\n    0,\n    0,\n    0\n], 1, [\n    0,\n    0,\n    0\n], [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], [\n    0,\n    0,\n    0\n], [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst z1_transformed = make_transform(rot_matrix, [\n    0,\n    0,\n    -1\n]);\nconst front_facing_towards_us = isVectorFacingTowardsUs(z1_transformed);\nlet points_front_3D = pnts.map(pnt => make_transform(tr_front_mat, pnt));\nlet points_back_3D = pnts.map(pnt => make_transform(tr_back_mat, pnt));\nlet winding_sides = [];\nlet sorted_sides = [];\nlet sorted_side_colors = [];\nlet num_sides_towards_us = 0;\nfor (var i = 0; i < num_pts; i++) {\n    if (!is_path_closed && i == num_pts - 1) {\n        break;\n    }\n    var F1 = points_front_3D[i], F2 = points_front_3D[(i + 1) % num_pts];\n    var B1 = points_back_3D[i], B2 = points_back_3D[(i + 1) % num_pts];\n    let abs_side_normal = getNormal([\n        F2,\n        F1,\n        B1\n    ], true);\n    let real_side_normal = !is_front_clockwise ? mul(abs_side_normal, -1) : abs_side_normal;\n    const sideIsFacingUs = isFacingTowardsUs([\n        0,\n        0,\n        0\n    ], real_side_normal);\n    if (sideIsFacingUs) {\n        num_sides_towards_us++;\n    }\n    winding_sides.push(sideIsFacingUs);\n    let side_sorted = [\n        F2,\n        F1,\n        B1,\n        B2\n    ];\n    side_sorted.sort((a, b) => b[2] - a[2]);\n    sorted_sides.push([\n        side_sorted,\n        i,\n        $bm_mod($bm_sum(i, 1), num_pts),\n        abs_side_normal\n    ]);\n}\ncompare_sides = function (side1, side2) {\n    const s1_vertices_z = side1[0].map(v => v[2]), s2_vertices_z = side2[0].map(v => v[2]);\n    for (var i = 0, il = side1[0].length; i < il; i++) {\n        if (s1_vertices_z[i] != s2_vertices_z[i]) {\n            return $bm_sub(s2_vertices_z[i], s1_vertices_z[i]);\n        }\n    }\n};\nsorted_sides.sort((a, b) => compare_sides(a, b));\nsorted_sides.sort(function (a, b) {\n    const fa = winding_sides[a[1]], fb = winding_sides[b[1]];\n    if (fa && !fb) {\n        return -1;\n    } else if (!fa && fb) {\n        return 1;\n    } else {\n        return 0;\n    }\n});\nsorted_sides_indices = sorted_sides.map(p => [\n    p[1],\n    p[2]\n]);\nif (false) {\n    const lambert_max = extrudalizer('Sides fill shadow opacity').value;\n    const rgba = extrudalizer('Sides color').value;\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    lambertShader = function (normal, max_value, multiplier) {\n        return $bm_div($bm_mul($bm_mul(multiplier, $bm_sub(100, max_value)), Math.abs(dot_(normal, [\n            0,\n            0,\n            1\n        ]))), 100);\n    };\n    sorted_side_colors = sorted_sides.map(p => adjustColorBrightness(rgba, lambertShader(p[3], lambert_max, 2)));\n}\nconst front_normal = div(z1_transformed, len_vec(z1_transformed));\nlet bb_front_2D = [], bb_back_2D = [], bb_front_transforms_te = [], bb_back_transforms_te = [], bb_front_transforms_tl = [], bb_back_transforms_tl = [];\nif (use_bb_back || use_bb_front) {\n    const bb = getBoundingBox(pnts);\n    let hasParent = shape_layer.hasParent;\n    let parent_transform_matrix = null;\n    if (hasParent) {\n        let p_pos = shape_layer.parent.transform.position;\n        let p_anchor = shape_layer.parent.transform.anchorPoint;\n        let p_rot = shape_layer.parent.transform.rotation;\n        let p_sca = shape_layer.parent.transform.scale;\n        parent_transform_matrix = get_transform_shape_matrix(p_anchor, p_pos, p_sca, p_rot, 0, 0);\n    }\n    if (use_bb_front) {\n        const bb_front_data = get_transforms_from_bb(bb, tr_front_mat, layer_transform_matrix, parent_transform_matrix, true, front_facing_towards_us, 3);\n        bb_front_2D = bb_front_data['boundingBoxTransformed'];\n        bb_front_transforms_te = bb_front_data['transformEffectControls'];\n        bb_front_transforms_tl = bb_front_data['transformLayerControls'];\n    }\n    if (use_bb_back) {\n        const bb_back_data = get_transforms_from_bb(bb, tr_back_mat, layer_transform_matrix, parent_transform_matrix, false, front_facing_towards_us, 3);\n        bb_back_2D = bb_back_data['boundingBoxTransformed'];\n        bb_back_transforms_te = bb_back_data['transformEffectControls'];\n        bb_back_transforms_tl = bb_back_data['transformLayerControls'];\n    }\n}\nlet grad_property = null;\ntry {\n    grad_property = shape_contents('ADBE Vector Graphic - G-Fill');\n} catch (e) {\n}\nlet grad_start_front_new = [\n    0,\n    0\n];\nlet grad_end_front_new = [\n    0,\n    0\n];\nlet grad_start_back_new = [\n    0,\n    0\n];\nlet grad_end_back_new = [\n    0,\n    0\n];\nif (grad_property != null) {\n    let grad_start = grad_property.startPoint.value;\n    let grad_end = grad_property.endPoint.value;\n    grad_start = transform2D_apply(shape_transform_matrix, grad_start);\n    grad_end = transform2D_apply(shape_transform_matrix, grad_end);\n    const grad_start_front = make_transform(tr_front_mat, grad_start);\n    const grad_end_front = make_transform(tr_front_mat, grad_end);\n    const grad_start_back = make_transform(tr_back_mat, grad_start);\n    const grad_end_back = make_transform(tr_back_mat, grad_end);\n    grad_start_front_new = grad_start_front;\n    grad_end_front_new = grad_end_front;\n    grad_start_back_new = grad_start_back;\n    grad_end_back_new = grad_end_back;\n    const grad_front_rot = $bm_div($bm_mul(extrudalizer('Front gradient direction').value, Math.PI), 180);\n    const grad_back_rot = $bm_div($bm_mul(extrudalizer('Back gradient direction').value, Math.PI), 180);\n    if (!arraysEqual([\n            grad_front_rot,\n            grad_back_rot\n        ], [\n            0,\n            0\n        ])) {\n        const grad_origin_front = div(add(grad_end_front, grad_start_front), 2);\n        const grad_origin_back = div(add(grad_end_back, grad_start_back), 2);\n        const grad_p_st_front = sub(grad_start_front, grad_origin_front);\n        const grad_p_end_front = sub(grad_end_front, grad_origin_front);\n        const grad_p_st_back = sub(grad_start_back, grad_origin_back);\n        const grad_p_end_back = sub(grad_end_back, grad_origin_back);\n        if (grad_front_rot != 0) {\n            const cos_st = Math.cos(grad_front_rot), sin_st = Math.sin(grad_front_rot);\n            grad_start_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_st_front[0]), $bm_mul(sin_st, grad_p_st_front[1])), grad_origin_front[0]);\n            grad_start_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_st_front[0]), $bm_mul(cos_st, grad_p_st_front[1])), grad_origin_front[1]);\n            grad_end_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_end_front[0]), $bm_mul(sin_st, grad_p_end_front[1])), grad_origin_front[0]);\n            grad_end_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_end_front[0]), $bm_mul(cos_st, grad_p_end_front[1])), grad_origin_front[1]);\n        }\n        if (grad_back_rot != 0) {\n            const cos_st_b = Math.cos(grad_back_rot), sin_st_b = Math.sin(grad_back_rot);\n            grad_start_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_st_back[0]), $bm_mul(sin_st_b, grad_p_st_back[1])), grad_origin_back[0]);\n            grad_start_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_st_back[0]), $bm_mul(cos_st_b, grad_p_st_back[1])), grad_origin_back[1]);\n            grad_end_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_end_back[0]), $bm_mul(sin_st_b, grad_p_end_back[1])), grad_origin_back[0]);\n            grad_end_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_end_back[0]), $bm_mul(cos_st_b, grad_p_end_back[1])), grad_origin_back[1]);\n        }\n    }\n}\nconst extr_data = [\n    tr_front_mat,\n    tr_back_mat,\n    shape_transform_matrix,\n    subdivs,\n    is_path_closed,\n    points_front_3D,\n    points_back_3D,\n    sorted_sides_indices,\n    front_facing_towards_us,\n    is_front_clockwise,\n    num_sides_towards_us,\n    sorted_side_colors,\n    pivot_position,\n    front_normal,\n    bb_front_2D,\n    bb_back_2D,\n    bb_front_transforms_te,\n    bb_back_transforms_te,\n    bb_front_transforms_tl,\n    bb_back_transforms_tl,\n    grad_start_front_new,\n    grad_end_front_new,\n    grad_start_back_new,\n    grad_end_back_new\n];\nvar txt = '';\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_2'] = extr_data;\n} catch (err) {\n    stringify = function (data, separator) {\n        return data.map(item => Array.isArray(item) ? item.join(',') : item.toString()).join(separator);\n    };\n    txt = stringify(extr_data, ';');\n}\n$bm_rt = txt;"},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":750,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":11,"ty":5,"nm":"EXTRUDALIZER DATA || square_3","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[500,500,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":150,"f":"Teko-SemiBold","t":"","ca":1,"j":1,"tr":0,"lh":180,"ls":0,"fc":[0,0,0]},"t":0}],"x":"var $bm_rt;\nvar dot_, cross_vec, len_vec, arraysEqual, getNormal, get2D_projection, getBoundingBox, getPositionMatrix, getRotationMatrix, getScaleMatrix, getIdentity, translate, rotateX, rotateY, rotateZ, multiplyMatrixVector, multiplyMatrices, multiplyArrayOfMatrices, transformMatrix, make_transform, getPoint, getArea, isClockwise, getCentroid, getCentroidPro, hasNoneZeroValues, angle_between, angle_between_cw, angle_between_cw_te, isStraightLine_w_delta, isFacingTowardsUs, isVectorFacingTowardsUs, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_shape_matrix, get_transforms_from_bb, num_pts, compare_sides, sorted_sides_indices, adjustColorBrightness, lambertShader, stringify;\n'use native operators';\ndot_ = function (a, b) {\n    if (a.length == 2) {\n        return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n    } else {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    }\n};\ncross_vec = function (a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\narraysEqual = function (arr1, arr2) {\n    for (var i = 0, il = arr1.length; i < il; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\ngetNormal = function (pts, normalized) {\n    let dir = cross_vec(sub(pts[1], pts[0]), sub(pts[2], pts[0]));\n    let len_dir = len_vec(dir);\n    if (len_dir === 0) {\n        return [\n            0,\n            0,\n            0\n        ];\n    }\n    if (normalized) {\n        return div(dir, len_dir);\n    } else {\n        return dir;\n    }\n};\nget2D_projection = function (points) {\n    return points.map(v => [\n        v[0],\n        v[1]\n    ]);\n};\ngetBoundingBox = function (points) {\n    const boundingBox = {\n        left: Number.POSITIVE_INFINITY,\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        width: undefined,\n        height: undefined,\n        center: undefined\n    };\n    points.forEach(point => {\n        boundingBox.left = Math.min(boundingBox.left, point[0]);\n        boundingBox.top = Math.min(boundingBox.top, point[1]);\n        boundingBox.right = Math.max(boundingBox.right, point[0]);\n        boundingBox.bottom = Math.max(boundingBox.bottom, point[1]);\n    });\n    boundingBox.width = sub(boundingBox.right, boundingBox.left);\n    boundingBox.height = sub(boundingBox.bottom, boundingBox.top);\n    boundingBox.center = [\n        add(boundingBox.left, $bm_div(boundingBox.width, 2)),\n        add(boundingBox.top, $bm_div(boundingBox.height, 2))\n    ];\n    boundingBox.left_top = [\n        boundingBox.left,\n        boundingBox.top\n    ];\n    boundingBox.left_bottom = [\n        boundingBox.left,\n        boundingBox.bottom\n    ];\n    boundingBox.right_top = [\n        boundingBox.right,\n        boundingBox.top\n    ];\n    boundingBox.right_bottom = [\n        boundingBox.right,\n        boundingBox.bottom\n    ];\n    return boundingBox;\n};\ngetPositionMatrix = function (value) {\n    return translate(getIdentity(), value[0], value[1], $bm_neg(value[2]));\n};\ngetRotationMatrix = function (angles) {\n    const angleX = angles[0];\n    const angleY = angles[1];\n    const angleZ = angles[2];\n    var matrix = getIdentity();\n    matrix = rotateZ(matrix, $bm_div($bm_mul(angleZ, Math.PI), 180));\n    matrix = rotateY(matrix, $bm_div($bm_mul(angleY, Math.PI), 180));\n    matrix = rotateX(matrix, $bm_div($bm_mul(angleX, Math.PI), 180));\n    return matrix;\n};\ngetScaleMatrix = function (sc) {\n    return [\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ngetIdentity = function () {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ntranslate = function (matrix, x, y, z) {\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        x,\n        0,\n        1,\n        0,\n        y,\n        0,\n        0,\n        1,\n        z,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateX = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateY = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        0,\n        sin_th,\n        0,\n        0,\n        1,\n        0,\n        0,\n        $bm_neg(sin_th),\n        0,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateZ = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nmultiplyMatrixVector = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 4; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 4; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 4), j)], vector[j]));\n        }\n    }\n    return result;\n};\nmultiplyMatrices = function (matrixB, matrixA) {\n    let result = new Array(16).fill(0);\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            for (let k = 0; k < 4; k++) {\n                result[$bm_sum($bm_mul(i, 4), j)] = $bm_sum(result[$bm_sum($bm_mul(i, 4), j)], $bm_mul(matrixA[$bm_sum($bm_mul(i, 4), k)], matrixB[$bm_sum($bm_mul(k, 4), j)]));\n            }\n        }\n    }\n    return result;\n};\nmultiplyArrayOfMatrices = function (matrices) {\n    var result = matrices[0];\n    for (var i = 1, il = matrices.length; i < il; i++) {\n        result = multiplyMatrices(result, matrices[i]);\n    }\n    return result;\n};\ntransformMatrix = function (move, sc, pivot, pitch_angles, anch, orbit_angles) {\n    var mat_array = [];\n    if (sc !== 1) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getScaleMatrix(sc),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getScaleMatrix(sc));\n        }\n    }\n    mat_array.push(getPositionMatrix(move));\n    if (!arraysEqual(pitch_angles, [\n            0,\n            0,\n            0\n        ])) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getRotationMatrix(pitch_angles),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getRotationMatrix(pitch_angles));\n        }\n    }\n    if (!arraysEqual(anch, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getPositionMatrix(anch.map(i => -i)));\n    }\n    if (!arraysEqual(orbit_angles, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getRotationMatrix(orbit_angles));\n    }\n    return multiplyArrayOfMatrices(mat_array);\n};\nmake_transform = function (transform_matrix, vector) {\n    if (vector.length == 2) {\n        vector = [\n            ...vector,\n            0,\n            1\n        ];\n    } else if (vector.length == 3) {\n        vector = [\n            ...vector,\n            1\n        ];\n    }\n    var result_vector_4d = multiplyMatrixVector(transform_matrix, vector);\n    return result_vector_4d.slice(0, 3);\n};\ngetPoint = function (p1, cp1, cp2, p2, t) {\n    const x = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[0]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[0])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[0])), $bm_mul(Math.pow(t, 3), p2[0]));\n    const y = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[1]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[1])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[1])), $bm_mul(Math.pow(t, 3), p2[1]));\n    return [\n        x,\n        y\n    ];\n};\ngetArea = function (points) {\n    var area = 0;\n    for (var i = 0, il = points.length; i < il; i++) {\n        var p1 = points[i];\n        var p2 = points[(i + 1) % il];\n        area = $bm_sum(area, $bm_sub($bm_mul(p1[0], p2[1]), $bm_mul(p2[0], p1[1])));\n    }\n    return $bm_div(area, 2);\n};\nisClockwise = function (points) {\n    return getArea(points) > 0;\n};\ngetCentroid = function (vertices) {\n    var area = getArea(vertices);\n    if (area === 0) {\n        function findCenter(points) {\n            let sumX = 0;\n            let sumY = 0;\n            for (let i = 0, il = points.length; i < il; i++) {\n                const point = points[i];\n                sumX = $bm_sum(sumX, point[0]);\n                sumY = $bm_sum(sumY, point[1]);\n            }\n            const meanX = $bm_div(sumX, points.length);\n            const meanY = $bm_div(sumY, points.length);\n            return [\n                meanX,\n                meanY\n            ];\n        }\n        return findCenter(vertices);\n    }\n    let centroidX = 0;\n    let centroidY = 0;\n    const numVertices = vertices.length;\n    for (var i = 0; i < numVertices; i++) {\n        var currentVertex = vertices[i];\n        var nextVertex = vertices[(i + 1) % numVertices];\n        var commonFactor = $bm_sub($bm_mul(currentVertex[0], nextVertex[1]), $bm_mul(nextVertex[0], currentVertex[1]));\n        centroidX = $bm_sum(centroidX, $bm_mul($bm_sum(currentVertex[0], nextVertex[0]), commonFactor));\n        centroidY = $bm_sum(centroidY, $bm_mul($bm_sum(currentVertex[1], nextVertex[1]), commonFactor));\n    }\n    var scaleFactor = $bm_div(1, $bm_mul(6, area));\n    centroidX *= scaleFactor;\n    centroidY *= scaleFactor;\n    return [\n        centroidX,\n        centroidY\n    ];\n};\ngetCentroidPro = function (vertices) {\n    const bb = getBoundingBox(vertices);\n    return {\n        0: bb.left_top,\n        1: [\n            (bb.left_top[0] + bb.right_top[0]) / 2,\n            bb.left_top[1]\n        ],\n        2: bb.right_top,\n        3: [\n            (bb.left_top[0] + bb.left_bottom[0]) / 2,\n            (bb.left_top[1] + bb.left_bottom[1]) / 2\n        ],\n        4: getCentroid(vertices),\n        5: [\n            (bb.right_top[0] + bb.right_bottom[0]) / 2,\n            (bb.right_top[1] + bb.right_bottom[1]) / 2\n        ],\n        6: bb.left_bottom,\n        7: [\n            (bb.left_bottom[0] + bb.right_bottom[0]) / 2,\n            bb.left_bottom[1]\n        ],\n        8: bb.right_bottom\n    };\n};\nhasNoneZeroValues = function (array2D) {\n    return array2D.some(array => array.some(value => value !== 0));\n};\nangle_between = function (a, b) {\n    const dot_prod = dot_(a, b);\n    const mag_a = len_vec(a);\n    const mag_b = len_vec(b);\n    const cos_ = $bm_div(dot_prod, $bm_mul(mag_a, mag_b));\n    return cos_;\n};\nangle_between_cw = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    angle = angle >= 0 ? angle : $bm_sum($bm_mul(2, Math.PI), angle);\n    const degrees = $bm_mul(angle, $bm_div(180, Math.PI));\n    return degrees;\n};\nangle_between_cw_te = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    const degrees = $bm_mul($bm_neg(angle), $bm_div(180, Math.PI));\n    return degrees;\n};\nisStraightLine_w_delta = function (cp1, cp2, delta) {\n    return angle_between(cp1, cp2) <= -delta;\n};\nisFacingTowardsUs = function (p1, p2) {\n    return dot_(sub(p2, p1), [\n        0,\n        0,\n        1\n    ]) > 0;\n};\nisVectorFacingTowardsUs = function (v) {\n    return dot_(v, [\n        0,\n        0,\n        -1\n    ]) > 0;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_shape_matrix = function (anchor, pos, scale, rot, skew, skew_axis) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    if (skew !== 0) {\n        const sk_angle = $bm_div($bm_mul(skew, Math.PI), 180);\n        const Sk = [\n            1,\n            Math.tan(-sk_angle),\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            1\n        ];\n        if (skew_axis !== 0) {\n            const sk_axis_angle = $bm_div($bm_mul(skew_axis, Math.PI), 180);\n            const cos_sk = Math.cos(sk_axis_angle);\n            const sin_sk = Math.sin(sk_axis_angle);\n            const Rz = [\n                cos_sk,\n                -sin_sk,\n                0,\n                sin_sk,\n                cos_sk,\n                0,\n                0,\n                0,\n                1\n            ];\n            const Rz_inv = [\n                cos_sk,\n                sin_sk,\n                0,\n                -sin_sk,\n                cos_sk,\n                0,\n                0,\n                0,\n                1\n            ];\n            const SkM = multiplyArrayOfMatrices3x3([\n                Rz_inv,\n                Sk,\n                Rz\n            ]);\n            mat_array.push(SkM);\n        } else {\n            mat_array.push(Sk);\n        }\n    }\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const cos_th = Math.cos(theta);\n        const sin_th = Math.sin(theta);\n        const R = [\n            cos_th,\n            -sin_th,\n            0,\n            sin_th,\n            cos_th,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nget_transforms_from_bb = function (bb, extr_transform_matrix, layer_transform_matrix, parent_transform_matrix, is_front, front_facing_towards_us, mode) {\n    let bb_transformed_3D = [];\n    if (front_facing_towards_us) {\n        bb_transformed_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom,\n            bb.right_bottom\n        ];\n    } else {\n        bb_transformed_3D = [\n            bb.right_top,\n            bb.left_top,\n            bb.right_bottom,\n            bb.left_bottom\n        ];\n    }\n    bb_transformed_3D = bb_transformed_3D.map(pnt => make_transform(extr_transform_matrix, pnt));\n    let bb_transformed_2D = get2D_projection(bb_transformed_3D);\n    bb_transformed_2D = bb_transformed_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    if (parent_transform_matrix) {\n        bb_transformed_2D = bb_transformed_2D.map(p => transform2D_apply(parent_transform_matrix, p));\n    }\n    const ex_left_top = bb_transformed_2D[0], ex_right_top = bb_transformed_2D[1], ex_left_bottom = bb_transformed_2D[2], ex_right_bottom = bb_transformed_2D[3];\n    let transform_effect_controls = [];\n    if (mode & 1) {\n        const bb_pos = ex_left_top;\n        const ex_AD = sub(ex_left_bottom, ex_left_top);\n        const rot = angle_between_cw_te(ex_AD, [\n            0,\n            1\n        ]);\n        const ex_AB = sub(ex_right_top, ex_left_top);\n        const rot_rad = $bm_mul(rot, $bm_div(Math.PI, 180));\n        const x_rot = [\n            Math.cos(rot_rad),\n            Math.sin(rot_rad)\n        ];\n        let skw = angle_between_cw_te(ex_AB, x_rot);\n        if (!front_facing_towards_us) {\n            skw = skw > 90 ? $bm_sub(skw, 180) : skw;\n            skw = skw <= -90 ? $bm_sum(skw, 180) : skw;\n        }\n        ;\n        let extra_skew_arr = [];\n        if (Math.abs(skw) > 70) {\n            const max_count = 7;\n            let count = 1;\n            let skew_ = Math.abs(skw);\n            const tan_70 = Math.tan(degreesToRadians(70));\n            while (skew_ > 70 && count < max_count) {\n                skew_ = radiansToDegrees(Math.atan($bm_sub(Math.tan(degreesToRadians(skew_)), tan_70)));\n                extra_skew_arr.push(skw > 0 ? skew_ : -skew_);\n                count++;\n            }\n        }\n        const scaleY = $bm_mul(100, len_vec(ex_AD));\n        const angle_AB_AD = angle_between_cw_te(ex_AD, ex_AB);\n        const beta = $bm_sub($bm_sub(180, angle_AB_AD), skw);\n        const scaleX_coeff = $bm_div(Math.sin($bm_div($bm_mul(beta, Math.PI), 180)), Math.sin($bm_div($bm_mul(angle_AB_AD, Math.PI), 180)));\n        let scaleX = $bm_div($bm_mul(100, len_vec(ex_AB)), scaleX_coeff);\n        if (!front_facing_towards_us) {\n            scaleX = $bm_neg(scaleX);\n        }\n        transform_effect_controls = [\n            bb_pos,\n            rot,\n            skw,\n            scaleY,\n            scaleX,\n            extra_skew_arr\n        ];\n    }\n    let transform_layer_controls = [];\n    if (mode & 2) {\n        const tl_AB = sub(bb.right_top, bb.left_top);\n        const tl_AD = sub(bb.left_bottom, bb.left_top);\n        const tl_scaleX_coeff = 100;\n        const tl_scaleY_coeff = 100;\n        const tl_bb_anchor = bb.left_top;\n        let tl_bb_pos = ex_left_top;\n        const tl_ex_AB = sub(ex_right_top, ex_left_top);\n        let tl_bb_theta = angle_between_cw(tl_AB, tl_ex_AB);\n        let tl_bb_scx = $bm_div($bm_mul(tl_scaleX_coeff, len_vec(tl_ex_AB)), len_vec(tl_AB));\n        const tl_ex_AD = sub(ex_left_bottom, ex_left_top);\n        const tl_bb_th_rad = $bm_mul(tl_bb_theta, $bm_div(Math.PI, 180));\n        const tl_cos_th = Math.cos(tl_bb_th_rad);\n        const tl_sin_th = Math.sin(tl_bb_th_rad);\n        const tl_AD_rot = [\n            tl_AD[0] * tl_cos_th - tl_AD[1] * tl_sin_th,\n            tl_AD[0] * tl_sin_th + tl_AD[1] * tl_cos_th\n        ];\n        let tl_skew = angle_between_cw(tl_AD_rot, tl_ex_AD);\n        tl_skew = tl_skew < 90 ? tl_skew : $bm_sub(tl_skew, 360);\n        const tl_sk_rad = $bm_div($bm_mul(tl_skew, Math.PI), 180);\n        const tl_AD_skew = [\n            tl_AD[0] + Math.tan(-tl_sk_rad) * tl_AD[1],\n            tl_AD[1]\n        ];\n        const tl_bb_scy = $bm_div($bm_mul(tl_scaleY_coeff, len_vec(tl_ex_AD)), len_vec(tl_AD_skew));\n        if (front_facing_towards_us && !is_front || !front_facing_towards_us && is_front) {\n            tl_bb_scx = $bm_neg(tl_bb_scx);\n            tl_bb_pos = $bm_sum(tl_bb_pos, tl_ex_AB);\n        }\n        transform_layer_controls = [\n            tl_bb_anchor[0],\n            tl_bb_anchor[1],\n            tl_bb_pos[0],\n            tl_bb_pos[1],\n            tl_bb_theta,\n            tl_bb_scx,\n            tl_bb_scy,\n            tl_skew\n        ];\n    }\n    return {\n        'boundingBoxTransformed': bb_transformed_2D,\n        'transformEffectControls': transform_effect_controls,\n        'transformLayerControls': transform_layer_controls\n    };\n};\nconst shape_layer = thisComp.layer('square_3');\nconst shape = shape_layer(2)(1);\nconst shape_contents = shape(2);\nconst targetPath = shape_contents(1)(2);\nconst is_path_closed = targetPath.isClosed();\nconst extrudalizer = shape_layer('ADBE Effect Parade')('Pseudo/Extrudalizer');\nconst depth = extrudalizer('Extrusion depth').value;\nlet anchor = extrudalizer('Position').value;\nanchor = [\n    $bm_neg(anchor[0]),\n    anchor[1],\n    anchor[2]\n];\nconst angleX = extrudalizer('X Rotation').value;\nconst angleY = extrudalizer('Y Rotation').value;\nconst angleZ = extrudalizer('Z Rotation').value;\nconst pivot_angleX = extrudalizer('Pitch (x)').value;\nconst pivot_angleY = extrudalizer('Yaw (y)').value;\nconst pivot_angleZ = extrudalizer('Roll (z)').value;\nconst scale_front = $bm_div(extrudalizer('Front scale').value, 100);\nconst scale_back = $bm_div(extrudalizer('Back scale').value, 100);\nconst use_bb_front = extrudalizer('Compute 3D front bounding box').value;\nconst use_bb_back = extrudalizer('Compute 3D back bounding box').value;\nlet pnts = targetPath.points();\nlet inTangents = targetPath.inTangents();\nlet outTangents = targetPath.outTangents();\nconst is_front_clockwise = isClockwise(pnts);\nconst shape_transform = shape.transform;\nconst s_anchor = shape_transform.anchorPoint;\nconst s_pos = shape_transform.position;\nconst s_scale = shape_transform.scale;\nconst s_rot = shape_transform.rotation;\nconst s_skew = shape_transform.skew;\nconst s_skew_axis = shape_transform.skewAxis;\nconst shape_transform_matrix = get_transform_shape_matrix(s_anchor, s_pos, s_scale, s_rot, s_skew, s_skew_axis);\nconst layer_transform = shape_layer.transform;\nconst l_anchor = layer_transform.anchorPoint;\nconst l_pos = layer_transform.position;\nconst l_scale = layer_transform.scale;\nconst l_rot = layer_transform.rotation;\nconst layer_transform_matrix = get_transform_shape_matrix(l_anchor, l_pos, l_scale, l_rot, 0, 0);\nlet subdivs = 1;\nlet num_pnts = pnts.length;\nif (hasNoneZeroValues(inTangents) || hasNoneZeroValues(outTangents)) {\n    subdivs = 5;\n    let pointsF = [];\n    for (var i = 0; i < num_pnts; i++) {\n        pointsF.push(pnts[i]);\n        if (!is_path_closed && i == num_pnts - 1) {\n            break;\n        }\n        var p1 = pnts[i], p2 = pnts[(i + 1) % num_pnts];\n        var out1 = outTangents[i], in2 = inTangents[(i + 1) % num_pnts];\n        var cp1 = add(p1, out1), cp2 = add(p2, in2);\n        var len_out1 = len_vec(out1), len_in2 = len_vec(in2);\n        var len_p1p2 = len_vec(sub(p2, p1));\n        if (len_out1 !== 0 || len_in2 !== 0) {\n            var a = len_out1 === 0 ? sub(p2, p1) : out1;\n            var b = len_in2 === 0 ? sub(p1, p2) : in2;\n            if (!isStraightLine_w_delta(a, b, 0.999) && (len_out1 > len_p1p2 * 0.02 || len_in2 > len_p1p2 * 0.02)) {\n                for (var j = 1; j < subdivs; j++) {\n                    var t = $bm_div(j, subdivs);\n                    pointsF.push(getPoint(p1, cp1, cp2, p2, t));\n                }\n            }\n        }\n    }\n    pnts = pointsF;\n}\npnts = pnts.map(p => transform2D_apply(shape_transform_matrix, p));\nnum_pts = pnts.length;\nconst zero_center_point = getCentroidPro(pnts)[4];\nlet z_coord = 0;\nswitch (1) {\ncase 0:\n    z_coord = $bm_div($bm_neg(depth), 2);\n    break;\ncase 1:\n    z_coord = 0;\n    break;\ncase 2:\n    z_coord = $bm_div(depth, 2);\n    break;\n}\n;\nconst zero_center_point_3D = [\n    ...zero_center_point,\n    z_coord\n];\nconst pivot_matrix = transformMatrix([\n    0,\n    0,\n    z_coord\n], 1, [\n    0,\n    0,\n    0\n], [\n    0,\n    0,\n    0\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst pivot_position = make_transform(pivot_matrix, zero_center_point);\nconst tr_front_mat = transformMatrix([\n    0,\n    0,\n    $bm_div($bm_neg(depth), 2)\n], scale_front, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst tr_back_mat = transformMatrix([\n    0,\n    0,\n    $bm_div(depth, 2)\n], scale_back, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst rot_matrix = transformMatrix([\n    0,\n    0,\n    0\n], 1, [\n    0,\n    0,\n    0\n], [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], [\n    0,\n    0,\n    0\n], [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst z1_transformed = make_transform(rot_matrix, [\n    0,\n    0,\n    -1\n]);\nconst front_facing_towards_us = isVectorFacingTowardsUs(z1_transformed);\nlet points_front_3D = pnts.map(pnt => make_transform(tr_front_mat, pnt));\nlet points_back_3D = pnts.map(pnt => make_transform(tr_back_mat, pnt));\nlet winding_sides = [];\nlet sorted_sides = [];\nlet sorted_side_colors = [];\nlet num_sides_towards_us = 0;\nfor (var i = 0; i < num_pts; i++) {\n    if (!is_path_closed && i == num_pts - 1) {\n        break;\n    }\n    var F1 = points_front_3D[i], F2 = points_front_3D[(i + 1) % num_pts];\n    var B1 = points_back_3D[i], B2 = points_back_3D[(i + 1) % num_pts];\n    let abs_side_normal = getNormal([\n        F2,\n        F1,\n        B1\n    ], true);\n    let real_side_normal = !is_front_clockwise ? mul(abs_side_normal, -1) : abs_side_normal;\n    const sideIsFacingUs = isFacingTowardsUs([\n        0,\n        0,\n        0\n    ], real_side_normal);\n    if (sideIsFacingUs) {\n        num_sides_towards_us++;\n    }\n    winding_sides.push(sideIsFacingUs);\n    let side_sorted = [\n        F2,\n        F1,\n        B1,\n        B2\n    ];\n    side_sorted.sort((a, b) => b[2] - a[2]);\n    sorted_sides.push([\n        side_sorted,\n        i,\n        $bm_mod($bm_sum(i, 1), num_pts),\n        abs_side_normal\n    ]);\n}\ncompare_sides = function (side1, side2) {\n    const s1_vertices_z = side1[0].map(v => v[2]), s2_vertices_z = side2[0].map(v => v[2]);\n    for (var i = 0, il = side1[0].length; i < il; i++) {\n        if (s1_vertices_z[i] != s2_vertices_z[i]) {\n            return $bm_sub(s2_vertices_z[i], s1_vertices_z[i]);\n        }\n    }\n};\nsorted_sides.sort((a, b) => compare_sides(a, b));\nsorted_sides.sort(function (a, b) {\n    const fa = winding_sides[a[1]], fb = winding_sides[b[1]];\n    if (fa && !fb) {\n        return -1;\n    } else if (!fa && fb) {\n        return 1;\n    } else {\n        return 0;\n    }\n});\nsorted_sides_indices = sorted_sides.map(p => [\n    p[1],\n    p[2]\n]);\nif (true) {\n    const lambert_max = extrudalizer('Sides fill shadow opacity').value;\n    const rgba = extrudalizer('Sides color').value;\n    adjustColorBrightness = function (rgba, brightness) {\n        const r = Math.max(0, Math.min(1, $bm_mul(rgba[0], brightness)));\n        const g = Math.max(0, Math.min(1, $bm_mul(rgba[1], brightness)));\n        const b = Math.max(0, Math.min(1, $bm_mul(rgba[2], brightness)));\n        return [\n            Math.round(r * 100) / 100,\n            Math.round(g * 100) / 100,\n            Math.round(b * 100) / 100,\n            rgba[3]\n        ];\n    };\n    lambertShader = function (normal, max_value, multiplier) {\n        return $bm_div($bm_mul($bm_mul(multiplier, $bm_sub(100, max_value)), Math.abs(dot_(normal, [\n            0,\n            0,\n            1\n        ]))), 100);\n    };\n    sorted_side_colors = sorted_sides.map(p => adjustColorBrightness(rgba, lambertShader(p[3], lambert_max, 2)));\n}\nconst front_normal = div(z1_transformed, len_vec(z1_transformed));\nlet bb_front_2D = [], bb_back_2D = [], bb_front_transforms_te = [], bb_back_transforms_te = [], bb_front_transforms_tl = [], bb_back_transforms_tl = [];\nif (use_bb_back || use_bb_front) {\n    const bb = getBoundingBox(pnts);\n    let hasParent = shape_layer.hasParent;\n    let parent_transform_matrix = null;\n    if (hasParent) {\n        let p_pos = shape_layer.parent.transform.position;\n        let p_anchor = shape_layer.parent.transform.anchorPoint;\n        let p_rot = shape_layer.parent.transform.rotation;\n        let p_sca = shape_layer.parent.transform.scale;\n        parent_transform_matrix = get_transform_shape_matrix(p_anchor, p_pos, p_sca, p_rot, 0, 0);\n    }\n    if (use_bb_front) {\n        const bb_front_data = get_transforms_from_bb(bb, tr_front_mat, layer_transform_matrix, parent_transform_matrix, true, front_facing_towards_us, 3);\n        bb_front_2D = bb_front_data['boundingBoxTransformed'];\n        bb_front_transforms_te = bb_front_data['transformEffectControls'];\n        bb_front_transforms_tl = bb_front_data['transformLayerControls'];\n    }\n    if (use_bb_back) {\n        const bb_back_data = get_transforms_from_bb(bb, tr_back_mat, layer_transform_matrix, parent_transform_matrix, false, front_facing_towards_us, 3);\n        bb_back_2D = bb_back_data['boundingBoxTransformed'];\n        bb_back_transforms_te = bb_back_data['transformEffectControls'];\n        bb_back_transforms_tl = bb_back_data['transformLayerControls'];\n    }\n}\nlet grad_property = null;\ntry {\n    grad_property = shape_contents('ADBE Vector Graphic - G-Fill');\n} catch (e) {\n}\nlet grad_start_front_new = [\n    0,\n    0\n];\nlet grad_end_front_new = [\n    0,\n    0\n];\nlet grad_start_back_new = [\n    0,\n    0\n];\nlet grad_end_back_new = [\n    0,\n    0\n];\nif (grad_property != null) {\n    let grad_start = grad_property.startPoint.value;\n    let grad_end = grad_property.endPoint.value;\n    grad_start = transform2D_apply(shape_transform_matrix, grad_start);\n    grad_end = transform2D_apply(shape_transform_matrix, grad_end);\n    const grad_start_front = make_transform(tr_front_mat, grad_start);\n    const grad_end_front = make_transform(tr_front_mat, grad_end);\n    const grad_start_back = make_transform(tr_back_mat, grad_start);\n    const grad_end_back = make_transform(tr_back_mat, grad_end);\n    grad_start_front_new = grad_start_front;\n    grad_end_front_new = grad_end_front;\n    grad_start_back_new = grad_start_back;\n    grad_end_back_new = grad_end_back;\n    const grad_front_rot = $bm_div($bm_mul(extrudalizer('Front gradient direction').value, Math.PI), 180);\n    const grad_back_rot = $bm_div($bm_mul(extrudalizer('Back gradient direction').value, Math.PI), 180);\n    if (!arraysEqual([\n            grad_front_rot,\n            grad_back_rot\n        ], [\n            0,\n            0\n        ])) {\n        const grad_origin_front = div(add(grad_end_front, grad_start_front), 2);\n        const grad_origin_back = div(add(grad_end_back, grad_start_back), 2);\n        const grad_p_st_front = sub(grad_start_front, grad_origin_front);\n        const grad_p_end_front = sub(grad_end_front, grad_origin_front);\n        const grad_p_st_back = sub(grad_start_back, grad_origin_back);\n        const grad_p_end_back = sub(grad_end_back, grad_origin_back);\n        if (grad_front_rot != 0) {\n            const cos_st = Math.cos(grad_front_rot), sin_st = Math.sin(grad_front_rot);\n            grad_start_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_st_front[0]), $bm_mul(sin_st, grad_p_st_front[1])), grad_origin_front[0]);\n            grad_start_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_st_front[0]), $bm_mul(cos_st, grad_p_st_front[1])), grad_origin_front[1]);\n            grad_end_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_end_front[0]), $bm_mul(sin_st, grad_p_end_front[1])), grad_origin_front[0]);\n            grad_end_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_end_front[0]), $bm_mul(cos_st, grad_p_end_front[1])), grad_origin_front[1]);\n        }\n        if (grad_back_rot != 0) {\n            const cos_st_b = Math.cos(grad_back_rot), sin_st_b = Math.sin(grad_back_rot);\n            grad_start_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_st_back[0]), $bm_mul(sin_st_b, grad_p_st_back[1])), grad_origin_back[0]);\n            grad_start_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_st_back[0]), $bm_mul(cos_st_b, grad_p_st_back[1])), grad_origin_back[1]);\n            grad_end_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_end_back[0]), $bm_mul(sin_st_b, grad_p_end_back[1])), grad_origin_back[0]);\n            grad_end_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_end_back[0]), $bm_mul(cos_st_b, grad_p_end_back[1])), grad_origin_back[1]);\n        }\n    }\n}\nconst extr_data = [\n    tr_front_mat,\n    tr_back_mat,\n    shape_transform_matrix,\n    subdivs,\n    is_path_closed,\n    points_front_3D,\n    points_back_3D,\n    sorted_sides_indices,\n    front_facing_towards_us,\n    is_front_clockwise,\n    num_sides_towards_us,\n    sorted_side_colors,\n    pivot_position,\n    front_normal,\n    bb_front_2D,\n    bb_back_2D,\n    bb_front_transforms_te,\n    bb_back_transforms_te,\n    bb_front_transforms_tl,\n    bb_back_transforms_tl,\n    grad_start_front_new,\n    grad_end_front_new,\n    grad_start_back_new,\n    grad_end_back_new\n];\nvar txt = '';\ntry {\n    _lottieGlobal.ml_extrudalizer = _lottieGlobal.ml_extrudalizer || {};\n    _lottieGlobal.ml_extrudalizer['EXTRUDALIZER DATA || square_3'] = extr_data;\n} catch (err) {\n    stringify = function (data, separator) {\n        return data.map(item => Array.isArray(item) ? item.join(',') : item.toString()).join(separator);\n    };\n    txt = stringify(extr_data, ';');\n}\n$bm_rt = txt;"},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":750,"st":0,"ct":1,"bm":0}]},{"id":"comp_2","nm":"MAP || Dice || square_1 || SIDE  [3]","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"SELFIE Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[108.359,-25.632,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.648,2.473],[-0.864,4.752],[0.528,1.944],[1.512,1.272],[1.392,0.673],[2.207,0.768],[1.152,0.792],[-0.288,1.2],[-3.024,0],[-1.584,-3.503],[0,0],[3.048,1.992],[4.223,0],[3.575,-2.567],[0.816,-4.608],[-2.257,-2.544],[-4.417,-1.487],[-0.385,-0.191],[0.288,-1.584],[3.935,0],[1.343,4.176],[0,0],[-3.312,-2.232],[-5.376,0]],"o":[[3.647,-2.472],[0.432,-2.639],[-0.529,-1.944],[-1.512,-1.271],[-1.393,-0.672],[-3.168,-1.104],[-1.152,-0.792],[0.432,-2.16],[3.503,0],[0,0],[-1.44,-3.696],[-3.049,-1.991],[-4.896,0],[-3.576,2.568],[-0.768,4.417],[2.256,2.545],[3.12,1.056],[2.495,1.056],[-0.432,2.304],[-4.8,0],[0,0],[1.055,3.888],[3.312,2.232],[5.616,0]],"v":[[33.264,-2.628],[40.032,-13.464],[39.888,-20.34],[36.828,-25.164],[32.472,-28.08],[27.072,-30.24],[20.592,-33.084],[19.296,-36.072],[24.48,-39.312],[32.112,-34.056],[43.128,-39.96],[36.396,-48.492],[25.488,-51.48],[12.78,-47.628],[6.192,-36.864],[8.424,-26.424],[18.432,-20.376],[23.688,-18.504],[27,-14.544],[20.448,-11.088],[11.232,-17.352],[-0.216,-11.448],[6.336,-2.268],[19.368,1.08]],"c":true},"ix":2},"nm":"S","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"S","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[83.664,-50.4],[51.624,-50.4],[42.768,0],[75.168,0],[77.256,-12.096],[57.816,-12.096],[59.112,-19.512],[76.392,-19.512],[78.552,-31.32],[61.128,-31.32],[62.424,-38.376],[81.504,-38.376]],"c":true},"ix":2},"nm":"E","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"E","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[103.032,-50.4],[90.164,-50.4],[81.288,0],[111.544,0],[113.704,-12.456],[96.352,-12.456]],"c":true},"ix":2},"nm":"L","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"L","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[156.024,-50.4],[125.121,-50.4],[116.208,0],[129.076,0],[132.134,-17.28],[149.821,-17.28],[151.981,-29.736],[134.341,-29.736],[135.792,-37.944],[153.864,-37.944]],"c":true},"ix":2},"nm":"F","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"F","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[153.504,0],[166.372,0],[175.248,-50.4],[162.38,-50.4]],"c":true},"ix":2},"nm":"I","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"I","np":3,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[215.208,-50.4],[183.168,-50.4],[174.312,0],[206.712,0],[208.8,-12.096],[189.36,-12.096],[190.656,-19.512],[207.936,-19.512],[210.096,-31.32],[192.672,-31.32],[193.968,-38.376],[213.048,-38.376]],"c":true},"ix":2},"nm":"E","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"E","np":3,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":5,"nm":"SELFIE","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[108.359,-25.632,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":72,"f":"Gilroy-BlackItalic","t":"SELFIE","ca":0,"j":0,"tr":0,"lh":86.4000015258789,"ls":0,"fc":[1,0.988,0.922]},"t":0}]},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Shape Layer 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.329411764706,0.454901960784,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]},{"id":"comp_3","nm":"MAP || Dice || square_1 || SIDE  [2]","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"HUG Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[149.806,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[33.409,-31.752],[19.252,-31.752],[22.536,-50.4],[9.668,-50.4],[0.792,0],[13.66,0],[17.071,-19.368],[31.247,-19.368],[27.864,0],[40.732,0],[49.536,-50.4],[36.668,-50.4]],"c":true},"ix":2},"nm":"H","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"H","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.982,3.049],[-1.008,5.665],[0,0],[0,0],[0,0],[4.71,0],[-0.768,4.226],[0,0],[0,0],[0,0],[-3.335,-3.312],[-6.141,0]],"o":[[3.982,-3.049],[0,0],[0,0],[0,0],[-0.77,4.223],[-4.759,0],[0,0],[0,0],[0,0],[-0.912,5.137],[3.335,3.312],[5.709,0]],"v":[[83.297,-3.492],[90.782,-16.562],[96.748,-50.4],[83.88,-50.4],[78.202,-17.782],[69.982,-11.448],[63.997,-17.786],[69.748,-50.4],[56.88,-50.4],[50.913,-16.559],[54.547,-3.887],[68.76,1.08]],"c":true},"ix":2},"nm":"U","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"U","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[6.192,0],[2.016,2.664],[-0.72,4.032],[-2.905,2.52],[-3.936,0],[-2.113,-3.744],[0,0],[3.6,2.113],[4.943,0],[5.568,-4.799],[1.248,-7.44],[-4.273,-5.208],[-7.824,0],[-5.232,4.464],[-1.249,7.632],[0,0]],"o":[[0,0],[0,0],[-2.496,4.417],[-4.032,0],[-2.016,-2.664],[0.72,-4.079],[2.904,-2.52],[4.943,0],[0,0],[-1.92,-3.696],[-3.6,-2.112],[-7.488,0],[-5.569,4.8],[-1.249,7.585],[4.272,5.209],[7.632,0],[5.231,-4.464],[0,0],[0,0]],"v":[[124.848,-28.872],[122.904,-17.784],[134.568,-17.784],[121.536,-11.16],[112.464,-15.156],[110.52,-25.2],[115.956,-35.1],[126.216,-38.88],[136.8,-33.264],[148.608,-39.6],[140.328,-48.312],[127.512,-51.48],[107.928,-44.28],[97.704,-25.92],[102.24,-6.732],[120.384,1.08],[139.68,-5.616],[149.4,-23.76],[150.264,-28.872]],"c":true},"ix":2},"nm":"G","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"G","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":5,"nm":"HUG","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[149.806,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":72,"f":"Gilroy-BlackItalic","t":"HUG","ca":0,"j":0,"tr":0,"lh":86.4000015258789,"ls":0,"fc":[1,0.988,0.922]},"t":0}]},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Shape Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.301960784314,0.41568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]},{"id":"comp_4","nm":"MAP || Dice || square_1 || SIDE  [1]","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"NUMBER Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[90.46,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[13.66,0],[18.36,-26.352],[31.464,0],[41.4,0],[50.308,-50.4],[37.44,-50.4],[32.772,-24.046],[19.709,-50.4],[9.732,-50.4],[0.792,0]],"c":true},"ix":2},"nm":"N","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"N","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.982,3.049],[-1.008,5.665],[0,0],[0,0],[0,0],[4.71,0],[-0.768,4.226],[0,0],[0,0],[0,0],[-3.335,-3.312],[-6.141,0]],"o":[[3.982,-3.049],[0,0],[0,0],[0,0],[-0.77,4.223],[-4.759,0],[0,0],[0,0],[0,0],[-0.912,5.137],[3.335,3.312],[5.709,0]],"v":[[84.017,-3.492],[91.502,-16.562],[97.468,-50.4],[84.6,-50.4],[78.922,-17.782],[70.702,-11.448],[64.717,-17.786],[70.468,-50.4],[57.6,-50.4],[51.633,-16.559],[55.267,-3.887],[69.48,1.08]],"c":true},"ix":2},"nm":"U","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"U","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[142.419,-50.4],[125.791,-28.656],[117.585,-50.4],[104.7,-50.4],[95.832,0],[108.7,0],[113.544,-27.576],[122.101,-6.912],[123.395,-6.912],[139.141,-27.222],[134.424,0],[147.292,0],[156.096,-50.4]],"c":true},"ix":2},"nm":"M","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"M","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.783,2.784],[4.992,0],[0,0],[0,0],[0,0],[-3.432,2.617],[-0.576,4.273],[3.552,2.689],[-0.768,4.32]],"o":[[-2.784,-2.783],[0,0],[0,0],[0,0],[5.712,0],[3.431,-2.616],[0.672,-4.943],[3.552,-2.256],[0.72,-4.32]],"v":[[194.904,-46.224],[183.24,-50.4],[164.088,-50.4],[155.232,0],[176.112,0],[189.828,-3.924],[195.84,-14.256],[191.52,-25.704],[198,-35.568]],"c":true},"ix":2},"nm":"B","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[-0.648,-0.72],[0.191,-1.199],[0.936,-0.695],[1.296,0],[0,0],[0,0],[0,0]],"o":[[0.648,0.72],[-0.192,1.249],[-0.936,0.696],[0,0],[0,0],[0,0],[1.296,0]],"v":[[184.284,-37.8],[184.968,-34.92],[183.276,-32.004],[179.928,-30.96],[173.592,-30.96],[174.96,-38.88],[181.368,-38.88]],"c":true},"ix":2},"nm":"B","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.96,-0.792],[1.392,0],[0,0],[0,0],[0,0],[-0.648,-0.767],[0.24,-1.296]],"o":[[-0.961,0.792],[0,0],[0,0],[0,0],[1.44,0],[0.648,0.768],[-0.241,1.249]],"v":[[181.44,-12.708],[177.912,-11.52],[170.136,-11.52],[171.648,-20.016],[179.496,-20.016],[182.628,-18.864],[183.24,-15.768]],"c":true},"ix":2},"nm":"B","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"B","np":6,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[239.472,-50.4],[207.432,-50.4],[198.576,0],[230.976,0],[233.064,-12.096],[213.624,-12.096],[214.92,-19.512],[232.2,-19.512],[234.36,-31.32],[216.936,-31.32],[218.232,-38.376],[237.312,-38.376]],"c":true},"ix":2},"nm":"E","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"E","np":3,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.12,3.553],[4.997,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.897,2.401],[-0.576,3.216]],"o":[[-3.121,-3.552],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[2.927,-1.296],[1.896,-2.4],[0.911,-4.992]],"v":[[277.92,-45.072],[265.744,-50.4],[245.979,-50.4],[237.096,0],[249.964,0],[252.838,-16.316],[258.324,-16.268],[264.24,0],[277.2,0],[270.288,-18.288],[277.524,-23.832],[281.232,-32.256]],"c":true},"ix":2},"nm":"R","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[-0.84,-1.055],[0.288,-1.68],[1.127,-1.055],[1.582,0.018],[0,0],[0,0]],"o":[[1.728,0],[0.839,1.056],[-0.288,1.681],[-1.127,1.056],[0,0],[0,0],[0,0]],"v":[[263.664,-38.52],[267.516,-36.936],[268.344,-32.832],[266.222,-28.728],[262.159,-27.171],[254.751,-27.171],[256.752,-38.52]],"c":true},"ix":2},"nm":"R","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"R","np":5,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.327529428519,0.454901960784,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]},{"id":"comp_5","nm":"MAP || Dice || square_1 || SIDE  [0]","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"SLAP Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[140.753,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.648,2.473],[-0.864,4.752],[0.528,1.944],[1.512,1.272],[1.392,0.673],[2.207,0.768],[1.152,0.792],[-0.288,1.2],[-3.024,0],[-1.584,-3.503],[0,0],[3.048,1.992],[4.223,0],[3.575,-2.567],[0.816,-4.608],[-2.257,-2.544],[-4.417,-1.487],[-0.385,-0.191],[0.288,-1.584],[3.935,0],[1.343,4.176],[0,0],[-3.312,-2.232],[-5.376,0]],"o":[[3.647,-2.472],[0.432,-2.639],[-0.529,-1.944],[-1.512,-1.271],[-1.393,-0.672],[-3.168,-1.104],[-1.152,-0.792],[0.432,-2.16],[3.503,0],[0,0],[-1.44,-3.696],[-3.049,-1.991],[-4.896,0],[-3.576,2.568],[-0.768,4.417],[2.256,2.545],[3.12,1.056],[2.495,1.056],[-0.432,2.304],[-4.8,0],[0,0],[1.055,3.888],[3.312,2.232],[5.616,0]],"v":[[33.264,-2.628],[40.032,-13.464],[39.888,-20.34],[36.828,-25.164],[32.472,-28.08],[27.072,-30.24],[20.592,-33.084],[19.296,-36.072],[24.48,-39.312],[32.112,-34.056],[43.128,-39.96],[36.396,-48.492],[25.488,-51.48],[12.78,-47.628],[6.192,-36.864],[8.424,-26.424],[18.432,-20.376],[23.688,-18.504],[27,-14.544],[20.448,-11.088],[11.232,-17.352],[-0.216,-11.448],[6.336,-2.268],[19.368,1.08]],"c":true},"ix":2},"nm":"S","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"S","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[64.512,-50.4],[51.644,-50.4],[42.768,0],[73.024,0],[75.184,-12.456],[57.832,-12.456]],"c":true},"ix":2},"nm":"L","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"L","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[123.768,0],[115.992,-50.4],[100.296,-50.4],[74.808,0],[88.992,0],[92.448,-7.272],[109.224,-7.272],[110.016,0]],"c":true},"ix":2},"nm":"A","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[106.128,-35.784],[108,-18.36],[97.776,-18.36]],"c":true},"ix":2},"nm":"A","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"A","np":5,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[-3.72,3.096],[-0.72,5.088],[2.976,3.432],[5.04,0]],"o":[[0,0],[0,0],[0,0],[0,0],[5.856,0],[3.719,-3.096],[0.767,-5.375],[-2.977,-3.431],[0,0]],"v":[[136.326,-50.4],[127.44,0],[140.308,0],[142.974,-15.12],[149.598,-15.12],[163.962,-19.764],[170.622,-32.04],[167.31,-45.252],[155.286,-50.4]],"c":true},"ix":2},"nm":"P","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.152,-0.983],[1.68,0],[0,0],[0,0],[0,0],[-0.864,-0.96],[0.335,-1.631]],"o":[[-1.152,0.984],[0,0],[0,0],[0,0],[1.728,0],[0.864,0.961],[-0.288,1.632]],"v":[[155.664,-28.836],[151.416,-27.36],[145.132,-27.36],[147.024,-38.088],[153.144,-38.088],[157.032,-36.648],[157.824,-32.76]],"c":true},"ix":2},"nm":"P","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"P","np":5,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.300017053941,0.41568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]},{"id":"comp_6","nm":"MAP || Dice || square_1 || BACK","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"DARE Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[134.513,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[-5.281,4.561],[-1.296,7.2],[3.984,5.088],[6.624,0]],"o":[[0,0],[0,0],[7.391,0],[5.28,-4.56],[1.248,-7.103],[-3.985,-5.087],[0,0]],"v":[[9.773,-50.4],[0.792,0],[21.437,0],[40.445,-6.84],[50.309,-24.48],[46.205,-42.768],[30.293,-50.4]],"c":true},"ix":2},"nm":"D","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[2.664,-2.376],[3.647,0],[0,0],[0,0],[0,0],[-1.776,-2.279],[0.623,-3.791]],"o":[[-2.664,2.376],[0,0],[0,0],[0,0],[3.503,0],[1.775,2.28],[-0.72,3.888]],"v":[[32.58,-16.02],[23.112,-12.456],[16.148,-12.456],[20.736,-37.944],[28.008,-37.944],[35.928,-34.524],[37.656,-25.416]],"c":true},"ix":2},"nm":"D","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"D","np":5,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[95.04,0],[87.264,-50.4],[71.568,-50.4],[46.08,0],[60.264,0],[63.72,-7.272],[80.496,-7.272],[81.288,0]],"c":true},"ix":2},"nm":"A","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[77.4,-35.784],[79.272,-18.36],[69.048,-18.36]],"c":true},"ix":2},"nm":"A","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"A","np":5,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.12,3.553],[4.997,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.897,2.401],[-0.576,3.216]],"o":[[-3.121,-3.552],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[2.927,-1.296],[1.896,-2.4],[0.911,-4.992]],"v":[[139.536,-45.072],[127.36,-50.4],[107.595,-50.4],[98.712,0],[111.58,0],[114.454,-16.316],[119.94,-16.268],[125.856,0],[138.816,0],[131.904,-18.288],[139.14,-23.832],[142.848,-32.256]],"c":true},"ix":2},"nm":"R","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[-0.84,-1.055],[0.288,-1.68],[1.127,-1.055],[1.582,0.018],[0,0],[0,0]],"o":[[1.728,0],[0.839,1.056],[-0.288,1.681],[-1.127,1.056],[0,0],[0,0],[0,0]],"v":[[125.28,-38.52],[129.132,-36.936],[129.96,-32.832],[127.838,-28.728],[123.775,-27.171],[116.367,-27.171],[118.368,-38.52]],"c":true},"ix":2},"nm":"R","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"R","np":5,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[184.248,-50.4],[152.208,-50.4],[143.352,0],[175.752,0],[177.84,-12.096],[158.4,-12.096],[159.696,-19.512],[176.976,-19.512],[179.136,-31.32],[161.712,-31.32],[163.008,-38.376],[182.088,-38.376]],"c":true},"ix":2},"nm":"E","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"E","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.352941176471,0.490196078431,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]},{"id":"comp_7","nm":"MAP || Dice || square_1 || FRONT","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"KISS Outlines","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150.389,0],"ix":2,"l":2},"a":{"a":0,"k":[75.312,-25.2,0],"ix":1,"l":2},"s":{"a":0,"k":[90,90,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[36.144,-50.4],[18.941,-29.978],[22.536,-50.4],[9.668,-50.4],[0.792,0],[13.66,0],[17.703,-22.956],[29.232,0],[42.552,0],[29.735,-25.343],[51.192,-50.4]],"c":true},"ix":2},"nm":"K","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"K","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[46.224,0],[59.092,0],[67.968,-50.4],[55.1,-50.4]],"c":true},"ix":2},"nm":"I","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"I","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.648,2.473],[-0.864,4.752],[0.528,1.944],[1.512,1.272],[1.392,0.673],[2.207,0.768],[1.152,0.792],[-0.288,1.2],[-3.024,0],[-1.584,-3.503],[0,0],[3.048,1.992],[4.223,0],[3.575,-2.567],[0.816,-4.608],[-2.257,-2.544],[-4.417,-1.487],[-0.385,-0.191],[0.288,-1.584],[3.935,0],[1.343,4.176],[0,0],[-3.312,-2.232],[-5.376,0]],"o":[[3.647,-2.472],[0.432,-2.639],[-0.529,-1.944],[-1.512,-1.271],[-1.393,-0.672],[-3.168,-1.104],[-1.152,-0.792],[0.432,-2.16],[3.503,0],[0,0],[-1.44,-3.696],[-3.049,-1.991],[-4.896,0],[-3.576,2.568],[-0.768,4.417],[2.256,2.545],[3.12,1.056],[2.495,1.056],[-0.432,2.304],[-4.8,0],[0,0],[1.055,3.888],[3.312,2.232],[5.616,0]],"v":[[98.784,-2.628],[105.552,-13.464],[105.408,-20.34],[102.348,-25.164],[97.992,-28.08],[92.592,-30.24],[86.112,-33.084],[84.816,-36.072],[90,-39.312],[97.632,-34.056],[108.648,-39.96],[101.916,-48.492],[91.008,-51.48],[78.3,-47.628],[71.712,-36.864],[73.944,-26.424],[83.952,-20.376],[89.208,-18.504],[92.52,-14.544],[85.968,-11.088],[76.752,-17.352],[65.304,-11.448],[71.856,-2.268],[84.888,1.08]],"c":true},"ix":2},"nm":"S","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"S","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.648,2.473],[-0.864,4.752],[0.528,1.944],[1.512,1.272],[1.392,0.673],[2.207,0.768],[1.152,0.792],[-0.288,1.2],[-3.024,0],[-1.584,-3.503],[0,0],[3.048,1.992],[4.223,0],[3.575,-2.567],[0.816,-4.608],[-2.257,-2.544],[-4.417,-1.487],[-0.385,-0.191],[0.288,-1.584],[3.935,0],[1.343,4.176],[0,0],[-3.312,-2.232],[-5.376,0]],"o":[[3.647,-2.472],[0.432,-2.639],[-0.529,-1.944],[-1.512,-1.271],[-1.393,-0.672],[-3.168,-1.104],[-1.152,-0.792],[0.432,-2.16],[3.503,0],[0,0],[-1.44,-3.696],[-3.049,-1.991],[-4.896,0],[-3.576,2.568],[-0.768,4.417],[2.256,2.545],[3.12,1.056],[2.495,1.056],[-0.432,2.304],[-4.8,0],[0,0],[1.055,3.888],[3.312,2.232],[5.616,0]],"v":[[139.968,-2.628],[146.736,-13.464],[146.592,-20.34],[143.532,-25.164],[139.176,-28.08],[133.776,-30.24],[127.296,-33.084],[126,-36.072],[131.184,-39.312],[138.816,-34.056],[149.832,-39.96],[143.1,-48.492],[132.192,-51.48],[119.484,-47.628],[112.896,-36.864],[115.128,-26.424],[125.136,-20.376],[130.392,-18.504],[133.704,-14.544],[127.152,-11.088],[117.936,-17.352],[106.488,-11.448],[113.04,-2.268],[126.072,1.08]],"c":true},"ix":2},"nm":"S","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0.988235294118,0.921568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"S","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[300,300],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":40,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0,0.353793693991,0.490196078431,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":764,"st":0,"ct":1,"bm":0}]}],"fonts":{"list":[{"origin":0,"fPath":"","fClass":"","fFamily":"Gilroy-BlackItalic","fWeight":"","fStyle":"?","fName":"Gilroy-BlackItalic","ascent":69.9996948242188},{"origin":0,"fPath":"","fClass":"","fFamily":"Teko","fWeight":"","fStyle":"SemiBold","fName":"Teko-SemiBold","ascent":66.8991088867188}]},"layers":[{"ddd":0,"ind":1,"ty":3,"nm":"Null 1","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[496,507,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[130,130,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":900,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":0,"nm":"D_2","parent":1,"refId":"comp_0","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2,"l":2},"a":{"a":0,"k":[540,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1080,"h":1080,"ip":0,"op":750,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Shape Layer 2","parent":1,"td":1,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[-4.615,-29.231,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[76.923,76.923,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":29,"nm":"Gaussian Blur","np":5,"mn":"ADBE Gaussian Blur 2","ix":1,"en":1,"ef":[{"ty":0,"nm":"Blurriness","mn":"ADBE Gaussian Blur 2-0001","ix":1,"v":{"a":0,"k":100,"ix":1}},{"ty":7,"nm":"Blur Dimensions","mn":"ADBE Gaussian Blur 2-0002","ix":2,"v":{"a":0,"k":1,"ix":2}},{"ty":7,"nm":"Repeat Edge Pixels","mn":"ADBE Gaussian Blur 2-0003","ix":3,"v":{"a":0,"k":0,"ix":3}}]}],"shapes":[{"ty":"gr","it":[{"ty":"rc","d":1,"s":{"a":0,"k":[868,624],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":0,"ix":4},"nm":"Rectangle Path 1","mn":"ADBE Vector Shape - Rect","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0.925490255917,0.90588241278,0.800000059838,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-58,-184],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Rectangle 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":900,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":4,"ty":0,"nm":"D_2","parent":1,"tt":2,"tp":3,"refId":"comp_0","sr":1,"ks":{"o":{"a":0,"k":15,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[-1.538,22.077,0],"ix":2,"l":2},"a":{"a":0,"k":[540,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":21,"nm":"Fill","np":9,"mn":"ADBE Fill","ix":1,"en":1,"ef":[{"ty":10,"nm":"Fill Mask","mn":"ADBE Fill-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"All Masks","mn":"ADBE Fill-0007","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":2,"nm":"Color","mn":"ADBE Fill-0002","ix":3,"v":{"a":0,"k":[0,0.352941185236,0.490196108818,1],"ix":3}},{"ty":7,"nm":"Invert","mn":"ADBE Fill-0006","ix":4,"v":{"a":0,"k":0,"ix":4}},{"ty":0,"nm":"Horizontal Feather","mn":"ADBE Fill-0003","ix":5,"v":{"a":0,"k":0,"ix":5}},{"ty":0,"nm":"Vertical Feather","mn":"ADBE Fill-0004","ix":6,"v":{"a":0,"k":0,"ix":6}},{"ty":0,"nm":"Opacity","mn":"ADBE Fill-0005","ix":7,"v":{"a":0,"k":1,"ix":7}}]},{"ty":29,"nm":"Gaussian Blur","np":5,"mn":"ADBE Gaussian Blur 2","ix":2,"en":1,"ef":[{"ty":0,"nm":"Blurriness","mn":"ADBE Gaussian Blur 2-0001","ix":1,"v":{"a":0,"k":40,"ix":1}},{"ty":7,"nm":"Blur Dimensions","mn":"ADBE Gaussian Blur 2-0002","ix":2,"v":{"a":0,"k":1,"ix":2}},{"ty":7,"nm":"Repeat Edge Pixels","mn":"ADBE Gaussian Blur 2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}}]}],"w":1080,"h":1080,"ip":0,"op":750,"st":0,"ct":1,"bm":0}],"markers":[],"props":{}}